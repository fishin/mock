{
  "tests": {
    "job": [
      {
        "title": "GET /view/job",
        "err": false,
        "duration": 1369
      },
      {
        "title": "POST /view/job no scm",
        "err": false,
        "duration": 160
      },
      {
        "title": "POST /view/job scm empty commands",
        "err": false,
        "duration": 132
      },
      {
        "title": "POST /view/job",
        "err": false,
        "duration": 138
      },
      {
        "title": "GET /view/job/{jobId} noruns",
        "err": false,
        "duration": 342
      },
      {
        "title": "GET /view/job/{jobId} single run",
        "err": false,
        "duration": 230
      },
      {
        "title": "GET /view/job/{jobId}",
        "err": false,
        "duration": 149
      },
      {
        "title": "GET /view/job/{jobId} activeRun",
        "err": false,
        "duration": 130
      },
      {
        "title": "GET /view/job/{jobId} no test exists",
        "err": false,
        "duration": 133
      },
      {
        "title": "GET /view/job/{jobId} full",
        "err": false,
        "duration": 120
      },
      {
        "title": "GET /view/jobs",
        "err": false,
        "duration": 102
      },
      {
        "title": "POST /view/job/{jobId}",
        "err": false,
        "duration": 59
      },
      {
        "title": "GET /view/job/{jobId}/start",
        "err": false,
        "duration": 62
      },
      {
        "title": "GET /view/job/{jobId}/commits",
        "err": false,
        "duration": 77
      },
      {
        "title": "GET /view/job/{jobId}/workspace/delete",
        "err": false,
        "duration": 55
      },
      {
        "title": "GET /view/job/{jobId}/delete",
        "err": false,
        "duration": 49
      }
    ],
    "login": [
      {
        "title": "GET /view/login",
        "err": false,
        "duration": 54
      },
      {
        "title": "GET /view/logout nologin",
        "err": false,
        "duration": 43
      },
      {
        "title": "POST /view/login no user",
        "err": false,
        "duration": 45
      },
      {
        "title": "POST /view/login invalid user",
        "err": false,
        "duration": 56
      },
      {
        "title": "POST /view/login lloyd",
        "err": false,
        "duration": 82
      },
      {
        "title": "POST /view/login admin",
        "err": false,
        "duration": 75
      },
      {
        "title": "POST /view/login admin new",
        "err": false,
        "duration": 68
      },
      {
        "title": "POST /view/login lloyd badpass",
        "err": false,
        "duration": 77
      },
      {
        "title": "POST /view/login admin badpass",
        "err": false,
        "duration": 93
      },
      {
        "title": "POST /view/login invalid",
        "err": false,
        "duration": 80
      }
    ],
    "queue": [
      {
        "title": "GET /view/queue/{jobId}/add 1",
        "err": false,
        "duration": 79
      },
      {
        "title": "GET /view/queue/{jobId}/add 2",
        "err": false,
        "duration": 58
      },
      {
        "title": "GET /view/jobs",
        "err": false,
        "duration": 138
      },
      {
        "title": "GET /view/jobs no last run",
        "err": false,
        "duration": 103
      },
      {
        "title": "GET /view/queue/{jobId}/remove 2",
        "err": false,
        "duration": 39
      },
      {
        "title": "GET /view/queue/{jobId}/remove 1",
        "err": false,
        "duration": 49
      }
    ],
    "redirect": [
      {
        "title": "GET /",
        "err": false,
        "duration": 42
      }
    ],
    "reel": [
      {
        "title": "GET /view/reel",
        "err": false,
        "duration": 71
      },
      {
        "title": "POST /view/reel",
        "err": false,
        "duration": 53
      },
      {
        "title": "GET /view/reel/{reelId}",
        "err": false,
        "duration": 81
      },
      {
        "title": "POST /view/reel/{reelId}",
        "err": false,
        "duration": 51
      },
      {
        "title": "GET /view/reel/{reelId}/delete",
        "err": false,
        "duration": 62
      }
    ],
    "run": [
      {
        "title": "GET /view/job/{jobId}/run/{runId}",
        "err": false,
        "duration": 143
      },
      {
        "title": "GET /view/job/{jobId}/run/{runId} single",
        "err": false,
        "duration": 122
      },
      {
        "title": "GET /view/job/{jobId}/run/{runId}/cancel",
        "err": false,
        "duration": 55
      },
      {
        "title": "GET /view/job/{jobId}/run/{runId}/delete",
        "err": false,
        "duration": 50
      }
    ],
    "tests": [
      {
        "title": "GET /view/job/{jobId}/run/{runId}/archive/lab.json",
        "err": false,
        "duration": 83
      },
      {
        "title": "GET /view/job/{jobId}/run/{runId}/test",
        "err": false,
        "duration": 100
      },
      {
        "title": "GET /view/job/{jobId}/run/{runId}/coverage",
        "err": false,
        "duration": 96
      }
    ],
    "user": [
      {
        "title": "GET /view/user",
        "err": false,
        "duration": 67
      },
      {
        "title": "POST /view/user lloyd",
        "err": false,
        "duration": 62
      },
      {
        "title": "POST /view/user admin",
        "err": false,
        "duration": 56
      },
      {
        "title": "GET /view/user/{userId} lloyd",
        "err": false,
        "duration": 75
      },
      {
        "title": "GET /view/user/{userId} admin",
        "err": false,
        "duration": 70
      },
      {
        "title": "GET /view/users",
        "err": false,
        "duration": 74
      },
      {
        "title": "POST /view/user/{userId} lloyd",
        "err": false,
        "duration": 62
      },
      {
        "title": "POST /view/user/{userId} newpass",
        "err": false,
        "duration": 59
      },
      {
        "title": "GET /view/user/{userId}/delete",
        "err": false,
        "duration": 57
      }
    ]
  },
  "duration": 6040,
  "leaks": [],
  "coverage": {
    "sloc": 2228,
    "hits": 2061,
    "misses": 167,
    "percent": 92.50448833034112,
    "files": [
      {
        "filename": "index.js",
        "percent": 100,
        "hits": 1,
        "misses": 0,
        "sloc": 1,
        "source": {
          "1": {
            "source": "module.exports = require('./lib');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/index.js",
        "percent": 100,
        "hits": 680,
        "misses": 0,
        "sloc": 680,
        "source": {
          "1": {
            "source": "var AuthCookie = require('hapi-auth-cookie');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Handlebars = require('handlebars');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "var Hapi = require('hapi');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Joi = require('joi');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Ui = require('./ui');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "var internals = {",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "    defaults: {",
            "miss": false
          },
          "10": {
            "source": "        viewPath: '/view',",
            "miss": false
          },
          "11": {
            "source": "        job: {",
            "miss": false
          },
          "12": {
            "source": "            dirPath: '/tmp/tacklebox/job',",
            "miss": false
          },
          "13": {
            "source": "            workspace: 'workspace'",
            "miss": false
          },
          "14": {
            "source": "        },",
            "miss": false
          },
          "15": {
            "source": "        reel: {",
            "miss": false
          },
          "16": {
            "source": "            dirPath: '/tmp/tacklebox/reel'",
            "miss": false
          },
          "17": {
            "source": "        },",
            "miss": false
          },
          "18": {
            "source": "        user: {",
            "miss": false
          },
          "19": {
            "source": "            dirPath: '/tmp/tacklebox/user'",
            "miss": false
          },
          "20": {
            "source": "        },",
            "miss": false
          },
          "21": {
            "source": "        prs: {",
            "miss": false
          },
          "22": {
            "source": "            autoStart: false",
            "miss": false
          },
          "23": {
            "source": "        },",
            "miss": false
          },
          "24": {
            "source": "        session: {",
            "miss": false
          },
          "25": {
            "source": "            cookie: {",
            "miss": false
          },
          "26": {
            "source": "                name: 'ficion',",
            "miss": false
          },
          "27": {
            "source": "                password: 'secret'",
            "miss": false
          },
          "28": {
            "source": "            },",
            "miss": false
          },
          "29": {
            "source": "            bell: {",
            "miss": false
          },
          "30": {
            "source": "                github: {",
            "miss": false
          },
          "31": {
            "source": "                    password: 'secret',",
            "miss": false
          },
          "32": {
            "source": "                    clientId: 'clientId',",
            "miss": false
          },
          "33": {
            "source": "                    clientSecret: 'clientSecret'",
            "miss": false
          },
          "34": {
            "source": "                }",
            "miss": false
          },
          "35": {
            "source": "            }",
            "miss": false
          },
          "36": {
            "source": "        },",
            "miss": false
          },
          "37": {
            "source": "        api: {",
            "miss": false
          },
          "38": {
            "source": "            url: 'http://localhost:8081/api'",
            "miss": false
          },
          "39": {
            "source": "        }",
            "miss": false
          },
          "40": {
            "source": "    }",
            "miss": false
          },
          "41": {
            "source": "};",
            "miss": false
          },
          "42": {
            "source": "",
            "miss": false
          },
          "43": {
            "source": "var css = {",
            "hits": 1,
            "miss": false
          },
          "44": {
            "source": "    handler: {",
            "miss": false
          },
          "45": {
            "source": "        directory: {",
            "miss": false
          },
          "46": {
            "source": "            listing: true,",
            "miss": false
          },
          "47": {
            "source": "            index: false,",
            "miss": false
          },
          "48": {
            "source": "            path: __dirname + '/../css'",
            "miss": false
          },
          "49": {
            "source": "        }",
            "miss": false
          },
          "50": {
            "source": "    },",
            "miss": false
          },
          "51": {
            "source": "    auth: false",
            "miss": false
          },
          "52": {
            "source": "};",
            "miss": false
          },
          "53": {
            "source": "var js = {",
            "hits": 1,
            "miss": false
          },
          "54": {
            "source": "    handler: {",
            "miss": false
          },
          "55": {
            "source": "        directory: {",
            "miss": false
          },
          "56": {
            "source": "            listing: true,",
            "miss": false
          },
          "57": {
            "source": "            index: false,",
            "miss": false
          },
          "58": {
            "source": "            path: __dirname + '/../js'",
            "miss": false
          },
          "59": {
            "source": "        }",
            "miss": false
          },
          "60": {
            "source": "    },",
            "miss": false
          },
          "61": {
            "source": "    auth: false",
            "miss": false
          },
          "62": {
            "source": "};",
            "miss": false
          },
          "63": {
            "source": "var fonts = {",
            "hits": 1,
            "miss": false
          },
          "64": {
            "source": "    handler: {",
            "miss": false
          },
          "65": {
            "source": "        directory: {",
            "miss": false
          },
          "66": {
            "source": "            listing: true,",
            "miss": false
          },
          "67": {
            "source": "            index: false,",
            "miss": false
          },
          "68": {
            "source": "            path: __dirname + '/../fonts'",
            "miss": false
          },
          "69": {
            "source": "        }",
            "miss": false
          },
          "70": {
            "source": "    },",
            "miss": false
          },
          "71": {
            "source": "    auth: false",
            "miss": false
          },
          "72": {
            "source": "};",
            "miss": false
          },
          "73": {
            "source": "",
            "miss": false
          },
          "74": {
            "source": "exports.register = function (server, options, next) {",
            "hits": 1,
            "miss": false
          },
          "75": {
            "source": "",
            "miss": false
          },
          "76": {
            "source": "    var settings = Hoek.applyToDefaults(internals.defaults, options);",
            "hits": 54,
            "miss": false
          },
          "77": {
            "source": "",
            "miss": false
          },
          "78": {
            "source": "    server.register({",
            "hits": 54,
            "miss": false
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "        register: require('hapi-auth-cookie')",
            "miss": false
          },
          "81": {
            "source": "    }, function (err) {",
            "miss": false
          },
          "82": {
            "source": "",
            "miss": false
          },
          "83": {
            "source": "        var authCookieOptions = {",
            "hits": 54,
            "miss": false
          },
          "84": {
            "source": "            password: settings.session.cookie.password,",
            "miss": false
          },
          "85": {
            "source": "            cookie: settings.session.cookie.name,",
            "miss": false
          },
          "86": {
            "source": "            redirectTo: settings.viewPath + '/login',",
            "miss": false
          },
          "87": {
            "source": "            isSecure: false",
            "miss": false
          },
          "88": {
            "source": "        };",
            "miss": false
          },
          "89": {
            "source": "        server.auth.strategy('session', 'cookie', authCookieOptions);",
            "hits": 54,
            "miss": false
          },
          "90": {
            "source": "    });",
            "miss": false
          },
          "91": {
            "source": "",
            "miss": false
          },
          "92": {
            "source": "    server.register({",
            "hits": 54,
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "        register: require('bell')",
            "miss": false
          },
          "95": {
            "source": "    }, function (err) {",
            "miss": false
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "        var bellAuthOptions = {",
            "hits": 54,
            "miss": false
          },
          "98": {
            "source": "            provider: 'github',",
            "miss": false
          },
          "99": {
            "source": "            password: settings.session.bell.github.password,",
            "miss": false
          },
          "100": {
            "source": "            scope: [ 'user', 'repo' ],",
            "miss": false
          },
          "101": {
            "source": "            clientId: settings.session.bell.github.clientId,",
            "miss": false
          },
          "102": {
            "source": "            clientSecret: settings.session.bell.github.clientSecret,",
            "miss": false
          },
          "103": {
            "source": "            isSecure: false",
            "miss": false
          },
          "104": {
            "source": "        };",
            "miss": false
          },
          "105": {
            "source": "        server.auth.strategy('github', 'bell', bellAuthOptions);",
            "hits": 54,
            "miss": false
          },
          "106": {
            "source": "    });",
            "miss": false
          },
          "107": {
            "source": "",
            "miss": false
          },
          "108": {
            "source": "//    var tackleboxOptions = {",
            "miss": false
          },
          "109": {
            "source": "//        job: settings.job,",
            "miss": false
          },
          "110": {
            "source": "//        run: settings.run,",
            "miss": false
          },
          "111": {
            "source": "//        reel: settings.reel,",
            "miss": false
          },
          "112": {
            "source": "//        user: settings.user",
            "miss": false
          },
          "113": {
            "source": "//    };",
            "miss": false
          },
          "114": {
            "source": "//",
            "miss": false
          },
          "115": {
            "source": "//    server.register({",
            "miss": false
          },
          "116": {
            "source": "//",
            "miss": false
          },
          "117": {
            "source": "//        register: require('tacklebox'),",
            "miss": false
          },
          "118": {
            "source": "//        options: tackleboxOptions",
            "miss": false
          },
          "119": {
            "source": "//    }, function (err) {",
            "miss": false
          },
          "120": {
            "source": "//       // do nothing",
            "miss": false
          },
          "121": {
            "source": "//    });",
            "miss": false
          },
          "122": {
            "source": "",
            "miss": false
          },
          "123": {
            "source": "    settings.plugins = server.plugins;",
            "hits": 54,
            "miss": false
          },
          "124": {
            "source": "    var ui = new Ui(settings);",
            "hits": 54,
            "miss": false
          },
          "125": {
            "source": "",
            "miss": false
          },
          "126": {
            "source": "    server.views({",
            "hits": 54,
            "miss": false
          },
          "127": {
            "source": "        path: __dirname + '/../views',",
            "miss": false
          },
          "128": {
            "source": "        partialsPath: __dirname + '/../views/partials',",
            "miss": false
          },
          "129": {
            "source": "        helpersPath: __dirname + '/../views/helpers',",
            "miss": false
          },
          "130": {
            "source": "        engines: {",
            "miss": false
          },
          "131": {
            "source": "            html: require('handlebars')",
            "miss": false
          },
          "132": {
            "source": "        }",
            "miss": false
          },
          "133": {
            "source": "    });",
            "miss": false
          },
          "134": {
            "source": "",
            "miss": false
          },
          "135": {
            "source": "    server.route([",
            "hits": 54,
            "miss": false
          },
          "136": {
            "source": "",
            "miss": false
          },
          "137": {
            "source": "        {",
            "miss": false
          },
          "138": {
            "source": "            method: 'GET', path: '/',",
            "miss": false
          },
          "139": {
            "source": "            config: {",
            "miss": false
          },
          "140": {
            "source": "                handler: ui.redirectHome,",
            "miss": false
          },
          "141": {
            "source": "                description: 'redirect / to /gills/jobs'",
            "miss": false
          },
          "142": {
            "source": "            }",
            "miss": false
          },
          "143": {
            "source": "        },",
            "miss": false
          },
          "144": {
            "source": "        {",
            "miss": false
          },
          "145": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "146": {
            "source": "            path: settings.viewPath + '/jobs',",
            "miss": false
          },
          "147": {
            "source": "            config: {",
            "miss": false
          },
          "148": {
            "source": "                handler: ui.Job.getJobsView,",
            "miss": false
          },
          "149": {
            "source": "                description: 'get jobs'",
            "miss": false
          },
          "150": {
            "source": "            }",
            "miss": false
          },
          "151": {
            "source": "        },",
            "miss": false
          },
          "152": {
            "source": "        {",
            "miss": false
          },
          "153": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "154": {
            "source": "            path: settings.viewPath + '/job',",
            "miss": false
          },
          "155": {
            "source": "            config: {",
            "miss": false
          },
          "156": {
            "source": "                handler: ui.Job.getJobCreateView,",
            "miss": false
          },
          "157": {
            "source": "                description: 'get job create view'",
            "miss": false
          },
          "158": {
            "source": "            }",
            "miss": false
          },
          "159": {
            "source": "        },",
            "miss": false
          },
          "160": {
            "source": "        {",
            "miss": false
          },
          "161": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "162": {
            "source": "            path: settings.viewPath + '/job',",
            "miss": false
          },
          "163": {
            "source": "            config: {",
            "miss": false
          },
          "164": {
            "source": "                handler: ui.Job.createJob,",
            "miss": false
          },
          "165": {
            "source": "                description: 'create job',",
            "miss": false
          },
          "166": {
            "source": "                validate: {",
            "miss": false
          },
          "167": {
            "source": "                    payload: {",
            "miss": false
          },
          "168": {
            "source": "                        name: Joi.string().required(),",
            "miss": false
          },
          "169": {
            "source": "                        description: Joi.string().allow('').optional(),",
            "miss": false
          },
          "170": {
            "source": "                        headCommand0: Joi.string().allow('').optional(),",
            "miss": false
          },
          "171": {
            "source": "                        headCommand1: Joi.string().allow('').optional(),",
            "miss": false
          },
          "172": {
            "source": "                        scmType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "173": {
            "source": "                        scmPrs: Joi.boolean().allow('').optional(),",
            "miss": false
          },
          "174": {
            "source": "                        scmRunOnCommit: Joi.boolean().allow('').optional(),",
            "miss": false
          },
          "175": {
            "source": "                        scmUrl: Joi.string().allow('').optional(),",
            "miss": false
          },
          "176": {
            "source": "                        scmBranch: Joi.string().allow('').optional(),",
            "miss": false
          },
          "177": {
            "source": "                        bodyCommand0: Joi.string().allow('').optional(),",
            "miss": false
          },
          "178": {
            "source": "                        bodyCommand1: Joi.string().allow('').optional(),",
            "miss": false
          },
          "179": {
            "source": "                        tailCommand0: Joi.string().allow('').optional(),",
            "miss": false
          },
          "180": {
            "source": "                        tailCommand1: Joi.string().allow('').optional(),",
            "miss": false
          },
          "181": {
            "source": "                        notifyTo: Joi.string().allow('').optional(),",
            "miss": false
          },
          "182": {
            "source": "                        notifyType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "183": {
            "source": "                        notifySubject: Joi.string().allow('').optional(),",
            "miss": false
          },
          "184": {
            "source": "                        notifyMessage: Joi.string().allow('').optional(),",
            "miss": false
          },
          "185": {
            "source": "                        archivePattern: Joi.string().allow('').optional(),",
            "miss": false
          },
          "186": {
            "source": "                        archiveMaxDays: Joi.number().allow('').optional(),",
            "miss": false
          },
          "187": {
            "source": "                        archiveMaxNum: Joi.number().allow('').optional(),",
            "miss": false
          },
          "188": {
            "source": "                        archiveType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "189": {
            "source": "                        scheduleType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "190": {
            "source": "                        cronPattern: Joi.string().allow('').optional()",
            "miss": false
          },
          "191": {
            "source": "                    }",
            "miss": false
          },
          "192": {
            "source": "                }",
            "miss": false
          },
          "193": {
            "source": "            }",
            "miss": false
          },
          "194": {
            "source": "        },",
            "miss": false
          },
          "195": {
            "source": "        {",
            "miss": false
          },
          "196": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "197": {
            "source": "            path: settings.viewPath + '/job/{jobId}',",
            "miss": false
          },
          "198": {
            "source": "            config: {",
            "miss": false
          },
          "199": {
            "source": "                handler: ui.Job.getJobView,",
            "miss": false
          },
          "200": {
            "source": "                description: 'get job view',",
            "miss": false
          },
          "201": {
            "source": "                validate: {",
            "miss": false
          },
          "202": {
            "source": "                    params: {",
            "miss": false
          },
          "203": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "204": {
            "source": "                    }",
            "miss": false
          },
          "205": {
            "source": "                }",
            "miss": false
          },
          "206": {
            "source": "            }",
            "miss": false
          },
          "207": {
            "source": "        },",
            "miss": false
          },
          "208": {
            "source": "        {",
            "miss": false
          },
          "209": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "210": {
            "source": "            path: settings.viewPath + '/job/{jobId}/start',",
            "miss": false
          },
          "211": {
            "source": "            config: {",
            "miss": false
          },
          "212": {
            "source": "                handler: ui.Job.startJob,",
            "miss": false
          },
          "213": {
            "source": "                description: 'start job',",
            "miss": false
          },
          "214": {
            "source": "                validate: {",
            "miss": false
          },
          "215": {
            "source": "                    params: {",
            "miss": false
          },
          "216": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "217": {
            "source": "                    }",
            "miss": false
          },
          "218": {
            "source": "                }",
            "miss": false
          },
          "219": {
            "source": "            }",
            "miss": false
          },
          "220": {
            "source": "        },",
            "miss": false
          },
          "221": {
            "source": "        {",
            "miss": false
          },
          "222": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "223": {
            "source": "            path: settings.viewPath + '/queue/{jobId}/add',",
            "miss": false
          },
          "224": {
            "source": "            config: {",
            "miss": false
          },
          "225": {
            "source": "                handler: ui.Queue.addJob,",
            "miss": false
          },
          "226": {
            "source": "                description: 'add job to queue',",
            "miss": false
          },
          "227": {
            "source": "                validate: {",
            "miss": false
          },
          "228": {
            "source": "                    params: {",
            "miss": false
          },
          "229": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "230": {
            "source": "                    }",
            "miss": false
          },
          "231": {
            "source": "                }",
            "miss": false
          },
          "232": {
            "source": "            }",
            "miss": false
          },
          "233": {
            "source": "        },",
            "miss": false
          },
          "234": {
            "source": "        {",
            "miss": false
          },
          "235": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "236": {
            "source": "            path: settings.viewPath + '/queue/{jobId}/remove',",
            "miss": false
          },
          "237": {
            "source": "            config: {",
            "miss": false
          },
          "238": {
            "source": "                handler: ui.Queue.removeJob,",
            "miss": false
          },
          "239": {
            "source": "                description: 'remove job from queue',",
            "miss": false
          },
          "240": {
            "source": "                validate: {",
            "miss": false
          },
          "241": {
            "source": "                    params: {",
            "miss": false
          },
          "242": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "243": {
            "source": "                    }",
            "miss": false
          },
          "244": {
            "source": "                }",
            "miss": false
          },
          "245": {
            "source": "            }",
            "miss": false
          },
          "246": {
            "source": "        },",
            "miss": false
          },
          "247": {
            "source": "        {",
            "miss": false
          },
          "248": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "249": {
            "source": "            path: settings.viewPath + '/job/{jobId}',",
            "miss": false
          },
          "250": {
            "source": "            config: {",
            "miss": false
          },
          "251": {
            "source": "                handler: ui.Job.updateJob,",
            "miss": false
          },
          "252": {
            "source": "                description: 'update job',",
            "miss": false
          },
          "253": {
            "source": "                validate: {",
            "miss": false
          },
          "254": {
            "source": "                    params: {",
            "miss": false
          },
          "255": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "256": {
            "source": "                    },",
            "miss": false
          },
          "257": {
            "source": "                    payload: {",
            "miss": false
          },
          "258": {
            "source": "                        name: Joi.string().optional(),",
            "miss": false
          },
          "259": {
            "source": "                        description: Joi.string().allow('').optional(),",
            "miss": false
          },
          "260": {
            "source": "                        headCommand0: Joi.string().allow('').optional(),",
            "miss": false
          },
          "261": {
            "source": "                        headCommand1: Joi.string().allow('').optional(),",
            "miss": false
          },
          "262": {
            "source": "                        scmType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "263": {
            "source": "                        scmPrs: Joi.boolean().allow('').optional(),",
            "miss": false
          },
          "264": {
            "source": "                        scmRunOnCommit: Joi.boolean().allow('').optional(),",
            "miss": false
          },
          "265": {
            "source": "                        scmUrl: Joi.string().allow('').optional(),",
            "miss": false
          },
          "266": {
            "source": "                        scmBranch: Joi.string().allow('').optional(),",
            "miss": false
          },
          "267": {
            "source": "                        bodyCommand0: Joi.string().allow('').optional(),",
            "miss": false
          },
          "268": {
            "source": "                        bodyCommand1: Joi.string().allow('').optional(),",
            "miss": false
          },
          "269": {
            "source": "                        tailCommand0: Joi.string().allow('').optional(),",
            "miss": false
          },
          "270": {
            "source": "                        tailCommand1: Joi.string().allow('').optional(),",
            "miss": false
          },
          "271": {
            "source": "                        notifyTo: Joi.string().allow('').optional(),",
            "miss": false
          },
          "272": {
            "source": "                        notifyType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "273": {
            "source": "                        notifySubject: Joi.string().allow('').optional(),",
            "miss": false
          },
          "274": {
            "source": "                        notifyMessage: Joi.string().allow('').optional(),",
            "miss": false
          },
          "275": {
            "source": "                        archivePattern: Joi.string().allow('').optional(),",
            "miss": false
          },
          "276": {
            "source": "                        archiveMaxDays: Joi.number().allow('').optional(),",
            "miss": false
          },
          "277": {
            "source": "                        archiveMaxNum: Joi.number().allow('').optional(),",
            "miss": false
          },
          "278": {
            "source": "                        archiveType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "279": {
            "source": "                        scheduleType: Joi.string().allow('').optional(),",
            "miss": false
          },
          "280": {
            "source": "                        cronPattern: Joi.string().allow('').optional()",
            "miss": false
          },
          "281": {
            "source": "                    }",
            "miss": false
          },
          "282": {
            "source": "                }",
            "miss": false
          },
          "283": {
            "source": "            }",
            "miss": false
          },
          "284": {
            "source": "        },",
            "miss": false
          },
          "285": {
            "source": "        {",
            "miss": false
          },
          "286": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "287": {
            "source": "            path: settings.viewPath + '/job/{jobId}/delete',",
            "miss": false
          },
          "288": {
            "source": "            config: {",
            "miss": false
          },
          "289": {
            "source": "                handler: ui.Job.deleteJob,",
            "miss": false
          },
          "290": {
            "source": "                description: 'delete job',",
            "miss": false
          },
          "291": {
            "source": "                validate: {",
            "miss": false
          },
          "292": {
            "source": "                    params: {",
            "miss": false
          },
          "293": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "294": {
            "source": "                    }",
            "miss": false
          },
          "295": {
            "source": "                }",
            "miss": false
          },
          "296": {
            "source": "            }",
            "miss": false
          },
          "297": {
            "source": "        },",
            "miss": false
          },
          "298": {
            "source": "        {",
            "miss": false
          },
          "299": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "300": {
            "source": "            path: settings.viewPath + '/job/{jobId}/workspace/delete',",
            "miss": false
          },
          "301": {
            "source": "            config: {",
            "miss": false
          },
          "302": {
            "source": "                handler: ui.Job.deleteWorkspace,",
            "miss": false
          },
          "303": {
            "source": "                description: 'delete workspace',",
            "miss": false
          },
          "304": {
            "source": "                validate: {",
            "miss": false
          },
          "305": {
            "source": "                    params: {",
            "miss": false
          },
          "306": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "307": {
            "source": "                    }",
            "miss": false
          },
          "308": {
            "source": "                }",
            "miss": false
          },
          "309": {
            "source": "            }",
            "miss": false
          },
          "310": {
            "source": "        },",
            "miss": false
          },
          "311": {
            "source": "        {",
            "miss": false
          },
          "312": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "313": {
            "source": "            path: settings.viewPath + '/job/{jobId}/commits',",
            "miss": false
          },
          "314": {
            "source": "            config: {",
            "miss": false
          },
          "315": {
            "source": "                handler: ui.Job.getCommitsView,",
            "miss": false
          },
          "316": {
            "source": "                description: 'get commits',",
            "miss": false
          },
          "317": {
            "source": "                validate: {",
            "miss": false
          },
          "318": {
            "source": "                    params: {",
            "miss": false
          },
          "319": {
            "source": "                        jobId: Joi.string().guid().required()",
            "miss": false
          },
          "320": {
            "source": "                    }",
            "miss": false
          },
          "321": {
            "source": "                }",
            "miss": false
          },
          "322": {
            "source": "            }",
            "miss": false
          },
          "323": {
            "source": "        },",
            "miss": false
          },
          "324": {
            "source": "        {",
            "miss": false
          },
          "325": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "326": {
            "source": "            path: settings.viewPath + '/job/{jobId}/run/{runId}',",
            "miss": false
          },
          "327": {
            "source": "            config: {",
            "miss": false
          },
          "328": {
            "source": "                handler: ui.Run.getRunView,",
            "miss": false
          },
          "329": {
            "source": "                description: 'get run view',",
            "miss": false
          },
          "330": {
            "source": "                validate: {",
            "miss": false
          },
          "331": {
            "source": "                    params: {",
            "miss": false
          },
          "332": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "333": {
            "source": "                        runId: Joi.string().guid().required()",
            "miss": false
          },
          "334": {
            "source": "                    }",
            "miss": false
          },
          "335": {
            "source": "                }",
            "miss": false
          },
          "336": {
            "source": "            }",
            "miss": false
          },
          "337": {
            "source": "        },",
            "miss": false
          },
          "338": {
            "source": "        {",
            "miss": false
          },
          "339": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "340": {
            "source": "            path: settings.viewPath + '/job/{jobId}/run/{runId}/archive/{file}',",
            "miss": false
          },
          "341": {
            "source": "            config: {",
            "miss": false
          },
          "342": {
            "source": "                handler: ui.Run.getFileView,",
            "miss": false
          },
          "343": {
            "source": "                description: 'get file view',",
            "miss": false
          },
          "344": {
            "source": "                validate: {",
            "miss": false
          },
          "345": {
            "source": "                    params: {",
            "miss": false
          },
          "346": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "347": {
            "source": "                        runId: Joi.string().guid().required(),",
            "miss": false
          },
          "348": {
            "source": "                        file: Joi.string().required()",
            "miss": false
          },
          "349": {
            "source": "                    }",
            "miss": false
          },
          "350": {
            "source": "                }",
            "miss": false
          },
          "351": {
            "source": "            }",
            "miss": false
          },
          "352": {
            "source": "        },",
            "miss": false
          },
          "353": {
            "source": "        {",
            "miss": false
          },
          "354": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "355": {
            "source": "            path: settings.viewPath + '/job/{jobId}/run/{runId}/test',",
            "miss": false
          },
          "356": {
            "source": "            config: {",
            "miss": false
          },
          "357": {
            "source": "                handler: ui.Run.getTestView,",
            "miss": false
          },
          "358": {
            "source": "                description: 'get test view',",
            "miss": false
          },
          "359": {
            "source": "                validate: {",
            "miss": false
          },
          "360": {
            "source": "                    params: {",
            "miss": false
          },
          "361": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "362": {
            "source": "                        runId: Joi.string().guid().required()",
            "miss": false
          },
          "363": {
            "source": "                    }",
            "miss": false
          },
          "364": {
            "source": "                }",
            "miss": false
          },
          "365": {
            "source": "            }",
            "miss": false
          },
          "366": {
            "source": "        },",
            "miss": false
          },
          "367": {
            "source": "        {",
            "miss": false
          },
          "368": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "369": {
            "source": "            path: settings.viewPath + '/job/{jobId}/run/{runId}/coverage',",
            "miss": false
          },
          "370": {
            "source": "            config: {",
            "miss": false
          },
          "371": {
            "source": "                handler: ui.Run.getCoverageView,",
            "miss": false
          },
          "372": {
            "source": "                description: 'get coverage view',",
            "miss": false
          },
          "373": {
            "source": "                validate: {",
            "miss": false
          },
          "374": {
            "source": "                    params: {",
            "miss": false
          },
          "375": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "376": {
            "source": "                        runId: Joi.string().guid().required()",
            "miss": false
          },
          "377": {
            "source": "                    }",
            "miss": false
          },
          "378": {
            "source": "                }",
            "miss": false
          },
          "379": {
            "source": "            }",
            "miss": false
          },
          "380": {
            "source": "        },",
            "miss": false
          },
          "381": {
            "source": "        {",
            "miss": false
          },
          "382": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "383": {
            "source": "            path: settings.viewPath + '/job/{jobId}/run/{runId}/delete',",
            "miss": false
          },
          "384": {
            "source": "            config: {",
            "miss": false
          },
          "385": {
            "source": "                handler: ui.Run.deleteRun,",
            "miss": false
          },
          "386": {
            "source": "                description: 'delete run',",
            "miss": false
          },
          "387": {
            "source": "                validate: {",
            "miss": false
          },
          "388": {
            "source": "                    params: {",
            "miss": false
          },
          "389": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "390": {
            "source": "                        runId: Joi.string().guid().required()",
            "miss": false
          },
          "391": {
            "source": "                    }",
            "miss": false
          },
          "392": {
            "source": "                }",
            "miss": false
          },
          "393": {
            "source": "            }",
            "miss": false
          },
          "394": {
            "source": "        },",
            "miss": false
          },
          "395": {
            "source": "        {",
            "miss": false
          },
          "396": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "397": {
            "source": "            path: settings.viewPath + '/job/{jobId}/run/{runId}/cancel',",
            "miss": false
          },
          "398": {
            "source": "            config: {",
            "miss": false
          },
          "399": {
            "source": "                handler: ui.Run.cancelRun,",
            "miss": false
          },
          "400": {
            "source": "                description: 'cancel run',",
            "miss": false
          },
          "401": {
            "source": "                validate: {",
            "miss": false
          },
          "402": {
            "source": "                    params: {",
            "miss": false
          },
          "403": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "404": {
            "source": "                        runId: Joi.string().guid().required()",
            "miss": false
          },
          "405": {
            "source": "                    }",
            "miss": false
          },
          "406": {
            "source": "                }",
            "miss": false
          },
          "407": {
            "source": "            }",
            "miss": false
          },
          "408": {
            "source": "        },",
            "miss": false
          },
          "409": {
            "source": "        {",
            "miss": false
          },
          "410": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "411": {
            "source": "            path: settings.viewPath + '/job/{jobId}/pr/{pr}/merge',",
            "miss": false
          },
          "412": {
            "source": "            config: {",
            "miss": false
          },
          "413": {
            "source": "                handler: ui.Job.mergePullRequest,",
            "miss": false
          },
          "414": {
            "source": "                description: 'merge pull request',",
            "miss": false
          },
          "415": {
            "source": "                validate: {",
            "miss": false
          },
          "416": {
            "source": "                    params: {",
            "miss": false
          },
          "417": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "418": {
            "source": "                        pr: Joi.number().required()",
            "miss": false
          },
          "419": {
            "source": "                    }",
            "miss": false
          },
          "420": {
            "source": "                }",
            "miss": false
          },
          "421": {
            "source": "            }",
            "miss": false
          },
          "422": {
            "source": "        },",
            "miss": false
          },
          "423": {
            "source": "        {",
            "miss": false
          },
          "424": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "425": {
            "source": "            path: settings.viewPath + '/job/{jobId}/pr/{pr}/retry',",
            "miss": false
          },
          "426": {
            "source": "            config: {",
            "miss": false
          },
          "427": {
            "source": "                handler: ui.Job.retryPullRequest,",
            "miss": false
          },
          "428": {
            "source": "                description: 'retry pull request',",
            "miss": false
          },
          "429": {
            "source": "                validate: {",
            "miss": false
          },
          "430": {
            "source": "                    params: {",
            "miss": false
          },
          "431": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "432": {
            "source": "                        pr: Joi.number().required()",
            "miss": false
          },
          "433": {
            "source": "                    }",
            "miss": false
          },
          "434": {
            "source": "                }",
            "miss": false
          },
          "435": {
            "source": "            }",
            "miss": false
          },
          "436": {
            "source": "        },",
            "miss": false
          },
          "437": {
            "source": "        {",
            "miss": false
          },
          "438": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "439": {
            "source": "            path: settings.viewPath + '/job/{jobId}/pr/{pr}/start',",
            "miss": false
          },
          "440": {
            "source": "            config: {",
            "miss": false
          },
          "441": {
            "source": "                handler: ui.Job.startPullRequest,",
            "miss": false
          },
          "442": {
            "source": "                description: 'start pull request',",
            "miss": false
          },
          "443": {
            "source": "                validate: {",
            "miss": false
          },
          "444": {
            "source": "                    params: {",
            "miss": false
          },
          "445": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "446": {
            "source": "                        pr: Joi.number().required()",
            "miss": false
          },
          "447": {
            "source": "                    }",
            "miss": false
          },
          "448": {
            "source": "                }",
            "miss": false
          },
          "449": {
            "source": "            }",
            "miss": false
          },
          "450": {
            "source": "        },",
            "miss": false
          },
          "451": {
            "source": "        {",
            "miss": false
          },
          "452": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "453": {
            "source": "            path: settings.viewPath + '/job/{jobId}/pr/{pr}/run/{runId}',",
            "miss": false
          },
          "454": {
            "source": "            config: {",
            "miss": false
          },
          "455": {
            "source": "                handler: ui.Run.getPullRequestRunView,",
            "miss": false
          },
          "456": {
            "source": "                description: 'get pull request run view',",
            "miss": false
          },
          "457": {
            "source": "                validate: {",
            "miss": false
          },
          "458": {
            "source": "                    params: {",
            "miss": false
          },
          "459": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "460": {
            "source": "                        pr: Joi.number().required(),",
            "miss": false
          },
          "461": {
            "source": "                        runId: Joi.string().guid().required()",
            "miss": false
          },
          "462": {
            "source": "                    }",
            "miss": false
          },
          "463": {
            "source": "                }",
            "miss": false
          },
          "464": {
            "source": "            }",
            "miss": false
          },
          "465": {
            "source": "        },",
            "miss": false
          },
          "466": {
            "source": "        {",
            "miss": false
          },
          "467": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "468": {
            "source": "            path: settings.viewPath + '/job/{jobId}/pr/{pr}/run/{runId}/cancel',",
            "miss": false
          },
          "469": {
            "source": "            config: {",
            "miss": false
          },
          "470": {
            "source": "                handler: ui.Run.cancelPullRequest,",
            "miss": false
          },
          "471": {
            "source": "                description: 'cancel pull request',",
            "miss": false
          },
          "472": {
            "source": "                validate: {",
            "miss": false
          },
          "473": {
            "source": "                    params: {",
            "miss": false
          },
          "474": {
            "source": "                        jobId: Joi.string().guid().required(),",
            "miss": false
          },
          "475": {
            "source": "                        pr: Joi.number().required(),",
            "miss": false
          },
          "476": {
            "source": "                        runId: Joi.string().guid().required()",
            "miss": false
          },
          "477": {
            "source": "                    }",
            "miss": false
          },
          "478": {
            "source": "                }",
            "miss": false
          },
          "479": {
            "source": "            }",
            "miss": false
          },
          "480": {
            "source": "        },",
            "miss": false
          },
          "481": {
            "source": "        {",
            "miss": false
          },
          "482": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "483": {
            "source": "            path: settings.viewPath + '/reel',",
            "miss": false
          },
          "484": {
            "source": "            config: {",
            "miss": false
          },
          "485": {
            "source": "                handler: ui.Reel.getReelCreateView,",
            "miss": false
          },
          "486": {
            "source": "                description: 'create reel view'",
            "miss": false
          },
          "487": {
            "source": "            }",
            "miss": false
          },
          "488": {
            "source": "        },",
            "miss": false
          },
          "489": {
            "source": "        {",
            "miss": false
          },
          "490": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "491": {
            "source": "            path: settings.viewPath + '/reel',",
            "miss": false
          },
          "492": {
            "source": "            config: {",
            "miss": false
          },
          "493": {
            "source": "                handler: ui.Reel.createReel,",
            "miss": false
          },
          "494": {
            "source": "                description: 'create reel',",
            "miss": false
          },
          "495": {
            "source": "                validate: {",
            "miss": false
          },
          "496": {
            "source": "                    payload: {",
            "miss": false
          },
          "497": {
            "source": "                        name: Joi.string().required(),",
            "miss": false
          },
          "498": {
            "source": "                        host: Joi.string().hostname().required(),",
            "miss": false
          },
          "499": {
            "source": "                        size: Joi.number().required(),",
            "miss": false
          },
          "500": {
            "source": "                        description: Joi.string().allow(''),",
            "miss": false
          },
          "501": {
            "source": "                        directory: Joi.string().allow(''),",
            "miss": false
          },
          "502": {
            "source": "                        port: Joi.number().allow('')",
            "miss": false
          },
          "503": {
            "source": "                    }",
            "miss": false
          },
          "504": {
            "source": "                }",
            "miss": false
          },
          "505": {
            "source": "            }",
            "miss": false
          },
          "506": {
            "source": "        },",
            "miss": false
          },
          "507": {
            "source": "        {",
            "miss": false
          },
          "508": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "509": {
            "source": "            path: settings.viewPath + '/reel/{reelId}',",
            "miss": false
          },
          "510": {
            "source": "            config: {",
            "miss": false
          },
          "511": {
            "source": "                handler: ui.Reel.getReelView,",
            "miss": false
          },
          "512": {
            "source": "                description: 'get reel view',",
            "miss": false
          },
          "513": {
            "source": "                validate: {",
            "miss": false
          },
          "514": {
            "source": "                    params: {",
            "miss": false
          },
          "515": {
            "source": "                        reelId: Joi.string().guid().required()",
            "miss": false
          },
          "516": {
            "source": "                    }",
            "miss": false
          },
          "517": {
            "source": "                }",
            "miss": false
          },
          "518": {
            "source": "            }",
            "miss": false
          },
          "519": {
            "source": "        },",
            "miss": false
          },
          "520": {
            "source": "        {",
            "miss": false
          },
          "521": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "522": {
            "source": "            path: settings.viewPath + '/reel/{reelId}',",
            "miss": false
          },
          "523": {
            "source": "            config: {",
            "miss": false
          },
          "524": {
            "source": "                handler: ui.Reel.updateReel,",
            "miss": false
          },
          "525": {
            "source": "                description: 'update reel',",
            "miss": false
          },
          "526": {
            "source": "                validate: {",
            "miss": false
          },
          "527": {
            "source": "                    params: {",
            "miss": false
          },
          "528": {
            "source": "                        reelId: Joi.string().guid().required()",
            "miss": false
          },
          "529": {
            "source": "                    },",
            "miss": false
          },
          "530": {
            "source": "                    payload: {",
            "miss": false
          },
          "531": {
            "source": "                        name: Joi.string(),",
            "miss": false
          },
          "532": {
            "source": "                        host: Joi.string().hostname(),",
            "miss": false
          },
          "533": {
            "source": "                        size: Joi.number(),",
            "miss": false
          },
          "534": {
            "source": "                        description: Joi.string().allow(''),",
            "miss": false
          },
          "535": {
            "source": "                        directory: Joi.string().allow(''),",
            "miss": false
          },
          "536": {
            "source": "                        port: Joi.number().allow('')",
            "miss": false
          },
          "537": {
            "source": "                    }",
            "miss": false
          },
          "538": {
            "source": "                }",
            "miss": false
          },
          "539": {
            "source": "            }",
            "miss": false
          },
          "540": {
            "source": "        },",
            "miss": false
          },
          "541": {
            "source": "        {",
            "miss": false
          },
          "542": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "543": {
            "source": "            path: settings.viewPath + '/reel/{reelId}/delete',",
            "miss": false
          },
          "544": {
            "source": "            config: {",
            "miss": false
          },
          "545": {
            "source": "                handler: ui.Reel.deleteReel,",
            "miss": false
          },
          "546": {
            "source": "                description: 'delete reel',",
            "miss": false
          },
          "547": {
            "source": "                validate: {",
            "miss": false
          },
          "548": {
            "source": "                    params: {",
            "miss": false
          },
          "549": {
            "source": "                        reelId: Joi.string().guid().required()",
            "miss": false
          },
          "550": {
            "source": "                    }",
            "miss": false
          },
          "551": {
            "source": "                }",
            "miss": false
          },
          "552": {
            "source": "            }",
            "miss": false
          },
          "553": {
            "source": "        },",
            "miss": false
          },
          "554": {
            "source": "        {",
            "miss": false
          },
          "555": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "556": {
            "source": "            path: settings.viewPath + '/user',",
            "miss": false
          },
          "557": {
            "source": "            config: {",
            "miss": false
          },
          "558": {
            "source": "                handler: ui.User.createUser,",
            "miss": false
          },
          "559": {
            "source": "                description: 'create user',",
            "miss": false
          },
          "560": {
            "source": "                validate: {",
            "miss": false
          },
          "561": {
            "source": "                    payload: {",
            "miss": false
          },
          "562": {
            "source": "                        name: Joi.string().required(),",
            "miss": false
          },
          "563": {
            "source": "                        type: Joi.string().required(),",
            "miss": false
          },
          "564": {
            "source": "                        displayName: Joi.string().when('type', { is: 'local', then: Joi.required(), otherwise: Joi.allow('').optional() }),",
            "miss": false
          },
          "565": {
            "source": "                        email: Joi.string().email().when('type', { is: 'local', then: Joi.required(), otherwise: Joi.allow('').optional() }),",
            "miss": false
          },
          "566": {
            "source": "                        password: Joi.string().when('type', { is: 'local', then: Joi.required(), otherwise: Joi.allow('').optional() })",
            "miss": false
          },
          "567": {
            "source": "                    }",
            "miss": false
          },
          "568": {
            "source": "                }",
            "miss": false
          },
          "569": {
            "source": "            }",
            "miss": false
          },
          "570": {
            "source": "        },",
            "miss": false
          },
          "571": {
            "source": "        {",
            "miss": false
          },
          "572": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "573": {
            "source": "            path: settings.viewPath + '/user',",
            "miss": false
          },
          "574": {
            "source": "            config: {",
            "miss": false
          },
          "575": {
            "source": "                handler: ui.User.getUserCreateView,",
            "miss": false
          },
          "576": {
            "source": "                description: 'create user view'",
            "miss": false
          },
          "577": {
            "source": "            }",
            "miss": false
          },
          "578": {
            "source": "        },",
            "miss": false
          },
          "579": {
            "source": "        {",
            "miss": false
          },
          "580": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "581": {
            "source": "            path: settings.viewPath + '/user/{userId}',",
            "miss": false
          },
          "582": {
            "source": "            config: {",
            "miss": false
          },
          "583": {
            "source": "                handler: ui.User.getUserView,",
            "miss": false
          },
          "584": {
            "source": "                description: 'get user view',",
            "miss": false
          },
          "585": {
            "source": "                validate: {",
            "miss": false
          },
          "586": {
            "source": "                    params: {",
            "miss": false
          },
          "587": {
            "source": "                        userId: Joi.string().guid().required()",
            "miss": false
          },
          "588": {
            "source": "                    }",
            "miss": false
          },
          "589": {
            "source": "                }",
            "miss": false
          },
          "590": {
            "source": "            }",
            "miss": false
          },
          "591": {
            "source": "        },",
            "miss": false
          },
          "592": {
            "source": "        {",
            "miss": false
          },
          "593": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "594": {
            "source": "            path: settings.viewPath + '/user/{userId}',",
            "miss": false
          },
          "595": {
            "source": "            config: {",
            "miss": false
          },
          "596": {
            "source": "                handler: ui.User.updateUser,",
            "miss": false
          },
          "597": {
            "source": "                description: 'update user',",
            "miss": false
          },
          "598": {
            "source": "                validate: {",
            "miss": false
          },
          "599": {
            "source": "                    params: {",
            "miss": false
          },
          "600": {
            "source": "                        userId: Joi.string().guid().required()",
            "miss": false
          },
          "601": {
            "source": "                    },",
            "miss": false
          },
          "602": {
            "source": "                    payload: {",
            "miss": false
          },
          "603": {
            "source": "                        name: Joi.string(),",
            "miss": false
          },
          "604": {
            "source": "                        type: Joi.string(),",
            "miss": false
          },
          "605": {
            "source": "                        displayName: Joi.string().when('type', { is: 'local', then: Joi.string().optional(), otherwise: Joi.string().allow('').optional() }),",
            "miss": false
          },
          "606": {
            "source": "                        email: Joi.string().email().when('type', { is: 'local', then: Joi.string().optional(), otherwise: Joi.string().allow('').optional() }),",
            "miss": false
          },
          "607": {
            "source": "                        password: Joi.string().when('type', { is: 'local', then: Joi.string().optional(), otherwise: Joi.string().allow('').optional() })",
            "miss": false
          },
          "608": {
            "source": "                    }",
            "miss": false
          },
          "609": {
            "source": "                }",
            "miss": false
          },
          "610": {
            "source": "            }",
            "miss": false
          },
          "611": {
            "source": "        },",
            "miss": false
          },
          "612": {
            "source": "        {",
            "miss": false
          },
          "613": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "614": {
            "source": "            path: settings.viewPath + '/users',",
            "miss": false
          },
          "615": {
            "source": "            config: {",
            "miss": false
          },
          "616": {
            "source": "                handler: ui.User.getUsersView,",
            "miss": false
          },
          "617": {
            "source": "                description: 'get users'",
            "miss": false
          },
          "618": {
            "source": "            }",
            "miss": false
          },
          "619": {
            "source": "        },",
            "miss": false
          },
          "620": {
            "source": "        {",
            "miss": false
          },
          "621": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "622": {
            "source": "            path: settings.viewPath + '/user/{userId}/delete',",
            "miss": false
          },
          "623": {
            "source": "            config: {",
            "miss": false
          },
          "624": {
            "source": "                handler: ui.User.deleteUser,",
            "miss": false
          },
          "625": {
            "source": "                description: 'delete user',",
            "miss": false
          },
          "626": {
            "source": "                validate: {",
            "miss": false
          },
          "627": {
            "source": "                    params: {",
            "miss": false
          },
          "628": {
            "source": "                        userId: Joi.string().guid().required()",
            "miss": false
          },
          "629": {
            "source": "                    }",
            "miss": false
          },
          "630": {
            "source": "                }",
            "miss": false
          },
          "631": {
            "source": "            }",
            "miss": false
          },
          "632": {
            "source": "        },",
            "miss": false
          },
          "633": {
            "source": "        {",
            "miss": false
          },
          "634": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "635": {
            "source": "            path: settings.viewPath + '/login',",
            "miss": false
          },
          "636": {
            "source": "            config: {",
            "miss": false
          },
          "637": {
            "source": "                handler: ui.User.loginUser,",
            "miss": false
          },
          "638": {
            "source": "                description: 'login user',",
            "miss": false
          },
          "639": {
            "source": "                auth: false,",
            "miss": false
          },
          "640": {
            "source": "                validate: {",
            "miss": false
          },
          "641": {
            "source": "                    payload: {",
            "miss": false
          },
          "642": {
            "source": "                        type: Joi.string().required(),",
            "miss": false
          },
          "643": {
            "source": "                        name: Joi.string().allow('').optional(),",
            "miss": false
          },
          "644": {
            "source": "                        password: Joi.string().allow('').optional()",
            "miss": false
          },
          "645": {
            "source": "                    }",
            "miss": false
          },
          "646": {
            "source": "                }",
            "miss": false
          },
          "647": {
            "source": "            }",
            "miss": false
          },
          "648": {
            "source": "        },",
            "miss": false
          },
          "649": {
            "source": "        {",
            "miss": false
          },
          "650": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "651": {
            "source": "            path: settings.viewPath + '/logout',",
            "miss": false
          },
          "652": {
            "source": "            config: {",
            "miss": false
          },
          "653": {
            "source": "                handler: ui.User.logoutUser,",
            "miss": false
          },
          "654": {
            "source": "                description: 'logout user'",
            "miss": false
          },
          "655": {
            "source": "            }",
            "miss": false
          },
          "656": {
            "source": "        },",
            "miss": false
          },
          "657": {
            "source": "        {",
            "miss": false
          },
          "658": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "659": {
            "source": "            path: settings.viewPath + '/login',",
            "miss": false
          },
          "660": {
            "source": "            config: {",
            "miss": false
          },
          "661": {
            "source": "                handler: ui.User.getLoginView,",
            "miss": false
          },
          "662": {
            "source": "                description: 'login view',",
            "miss": false
          },
          "663": {
            "source": "                auth: false",
            "miss": false
          },
          "664": {
            "source": "            }",
            "miss": false
          },
          "665": {
            "source": "        },",
            "miss": false
          },
          "666": {
            "source": "        {",
            "miss": false
          },
          "667": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "668": {
            "source": "            path: settings.viewPath + '/login/github',",
            "miss": false
          },
          "669": {
            "source": "            config: {",
            "miss": false
          },
          "670": {
            "source": "                handler: ui.User.loginGithub,",
            "miss": false
          },
          "671": {
            "source": "                description: 'github login',",
            "miss": false
          },
          "672": {
            "source": "                auth: 'github'",
            "miss": false
          },
          "673": {
            "source": "            }",
            "miss": false
          },
          "674": {
            "source": "        },",
            "miss": false
          },
          "675": {
            "source": "        {",
            "miss": false
          },
          "676": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "677": {
            "source": "            path: settings.viewPath + '/css/{path*}',",
            "miss": false
          },
          "678": {
            "source": "            config: css",
            "miss": false
          },
          "679": {
            "source": "        },",
            "miss": false
          },
          "680": {
            "source": "        {",
            "miss": false
          },
          "681": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "682": {
            "source": "            path: settings.viewPath + '/js/{path*}',",
            "miss": false
          },
          "683": {
            "source": "            config: js",
            "miss": false
          },
          "684": {
            "source": "        },",
            "miss": false
          },
          "685": {
            "source": "        {",
            "miss": false
          },
          "686": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "687": {
            "source": "            path: settings.viewPath + '/fonts/{path*}',",
            "miss": false
          },
          "688": {
            "source": "            config: fonts",
            "miss": false
          },
          "689": {
            "source": "        }",
            "miss": false
          },
          "690": {
            "source": "    ]);",
            "miss": false
          },
          "691": {
            "source": "",
            "miss": false
          },
          "692": {
            "source": "    next();",
            "hits": 54,
            "miss": false
          },
          "693": {
            "source": "};",
            "miss": false
          },
          "694": {
            "source": "",
            "miss": false
          },
          "695": {
            "source": "exports.register.attributes = {",
            "hits": 1,
            "miss": false
          },
          "696": {
            "source": "",
            "miss": false
          },
          "697": {
            "source": "    pkg: require('../package.json')",
            "miss": false
          },
          "698": {
            "source": "};",
            "miss": false
          },
          "699": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/ui.js",
        "percent": 100,
        "hits": 24,
        "misses": 0,
        "sloc": 24,
        "source": {
          "1": {
            "source": "var Utils = require('./utils');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Job = require('./ui/job');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "var Run = require('./ui/run');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Reel = require('./ui/reel');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var User = require('./ui/user');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Queue = require('./ui/queue');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "module.exports = internals.Ui = function (options) {",
            "hits": 1,
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "    internals.Ui.settings = options;",
            "hits": 54,
            "miss": false
          },
          "13": {
            "source": "    var job = new Job(options);",
            "hits": 54,
            "miss": false
          },
          "14": {
            "source": "    var run = new Run(options);",
            "hits": 54,
            "miss": false
          },
          "15": {
            "source": "    var reel = new Reel(options);",
            "hits": 54,
            "miss": false
          },
          "16": {
            "source": "    var user = new User(options);",
            "hits": 54,
            "miss": false
          },
          "17": {
            "source": "    var queue = new Queue(options);",
            "hits": 54,
            "miss": false
          },
          "18": {
            "source": "    this.Job = job;",
            "hits": 54,
            "miss": false
          },
          "19": {
            "source": "    this.Run = run;",
            "hits": 54,
            "miss": false
          },
          "20": {
            "source": "    this.Reel = reel;",
            "hits": 54,
            "miss": false
          },
          "21": {
            "source": "    this.User = user;",
            "hits": 54,
            "miss": false
          },
          "22": {
            "source": "    this.Queue = queue;",
            "hits": 54,
            "miss": false
          },
          "23": {
            "source": "    this.redirectHome = exports.redirectHome;",
            "hits": 54,
            "miss": false
          },
          "24": {
            "source": "};",
            "miss": false
          },
          "25": {
            "source": "",
            "miss": false
          },
          "26": {
            "source": "exports.redirectHome = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "    return reply.redirect(internals.Ui.settings.viewPath + '/jobs');",
            "hits": 1,
            "miss": false
          },
          "29": {
            "source": "};",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/utils.js",
        "percent": 100,
        "hits": 22,
        "misses": 0,
        "sloc": 22,
        "source": {
          "1": {
            "source": "var Job = require('./utils/job');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Reel = require('./utils/reel');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "var Run = require('./utils/run');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var User = require('./utils/user');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Queue = require('./utils/queue');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Common = require('./utils/common');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "module.exports = internals.Utils = function (options) {",
            "hits": 1,
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "    this.settings = options;",
            "hits": 270,
            "miss": false
          },
          "13": {
            "source": "    var job = new Job(options);",
            "hits": 270,
            "miss": false
          },
          "14": {
            "source": "    var reel = new Reel(options);",
            "hits": 270,
            "miss": false
          },
          "15": {
            "source": "    var run = new Run(options);",
            "hits": 270,
            "miss": false
          },
          "16": {
            "source": "    var user = new User(options);",
            "hits": 270,
            "miss": false
          },
          "17": {
            "source": "    var queue = new Queue(options);",
            "hits": 270,
            "miss": false
          },
          "18": {
            "source": "    var common = new Common(options);",
            "hits": 270,
            "miss": false
          },
          "19": {
            "source": "    this.Job = job;",
            "hits": 270,
            "miss": false
          },
          "20": {
            "source": "    this.Reel = reel;",
            "hits": 270,
            "miss": false
          },
          "21": {
            "source": "    this.Run = run;",
            "hits": 270,
            "miss": false
          },
          "22": {
            "source": "    this.User = user;",
            "hits": 270,
            "miss": false
          },
          "23": {
            "source": "    this.Queue = queue;",
            "hits": 270,
            "miss": false
          },
          "24": {
            "source": "    this.Common = common;",
            "hits": 270,
            "miss": false
          },
          "25": {
            "source": "};",
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/ui/job.js",
        "percent": 87.03703703703704,
        "hits": 94,
        "misses": 14,
        "sloc": 108,
        "source": {
          "1": {
            "source": "var Utils = require('../utils');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "module.exports = internals.Job = function (options) {",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "    this.settings = options;",
            "hits": 54,
            "miss": false
          },
          "8": {
            "source": "    internals.Job.settings = options;",
            "hits": 54,
            "miss": false
          },
          "9": {
            "source": "    var utils = new Utils(options);",
            "hits": 54,
            "miss": false
          },
          "10": {
            "source": "    internals.Job.startJob = utils.Job.startJob;",
            "hits": 54,
            "miss": false
          },
          "11": {
            "source": "    internals.Job.startPullRequest = utils.Job.startPullRequest;",
            "hits": 54,
            "miss": false
          },
          "12": {
            "source": "    internals.Job.createJob = utils.Job.createJob;",
            "hits": 54,
            "miss": false
          },
          "13": {
            "source": "    internals.Job.updateJob = utils.Job.updateJob;",
            "hits": 54,
            "miss": false
          },
          "14": {
            "source": "    internals.Job.getJobConfig = utils.Job.getJobConfig;",
            "hits": 54,
            "miss": false
          },
          "15": {
            "source": "    internals.Job.getJobCreateConfig = utils.Job.getJobCreateConfig;",
            "hits": 54,
            "miss": false
          },
          "16": {
            "source": "    internals.Job.getJobsConfig = utils.Job.getJobsConfig;",
            "hits": 54,
            "miss": false
          },
          "17": {
            "source": "    internals.Job.deleteJob = utils.Job.deleteJob;",
            "hits": 54,
            "miss": false
          },
          "18": {
            "source": "    internals.Job.deleteWorkspace = utils.Job.deleteWorkspace;",
            "hits": 54,
            "miss": false
          },
          "19": {
            "source": "    internals.Job.getCommitsConfig = utils.Job.getCommitsConfig;",
            "hits": 54,
            "miss": false
          },
          "20": {
            "source": "    internals.Job.mergePullRequest = utils.Job.mergePullRequest;",
            "hits": 54,
            "miss": false
          },
          "21": {
            "source": "    internals.Job.retryPullRequest = utils.Job.retryPullRequest;",
            "hits": 54,
            "miss": false
          },
          "22": {
            "source": "    this.getJobsView = exports.getJobsView;",
            "hits": 54,
            "miss": false
          },
          "23": {
            "source": "    this.getJobView = exports.getJobView;",
            "hits": 54,
            "miss": false
          },
          "24": {
            "source": "    this.getCommitsView = exports.getCommitsView;",
            "hits": 54,
            "miss": false
          },
          "25": {
            "source": "    this.getJobCreateView = exports.getJobCreateView;",
            "hits": 54,
            "miss": false
          },
          "26": {
            "source": "    this.startJob = exports.startJob;",
            "hits": 54,
            "miss": false
          },
          "27": {
            "source": "    this.startPullRequest = exports.startPullRequest;",
            "hits": 54,
            "miss": false
          },
          "28": {
            "source": "    this.createJob = exports.createJob;",
            "hits": 54,
            "miss": false
          },
          "29": {
            "source": "    this.deleteJob = exports.deleteJob;",
            "hits": 54,
            "miss": false
          },
          "30": {
            "source": "    this.deleteWorkspace = exports.deleteWorkspace;",
            "hits": 54,
            "miss": false
          },
          "31": {
            "source": "    this.updateJob = exports.updateJob;",
            "hits": 54,
            "miss": false
          },
          "32": {
            "source": "    this.mergePullRequest = exports.mergePullRequest;",
            "hits": 54,
            "miss": false
          },
          "33": {
            "source": "    this.retryPullRequest = exports.retryPullRequest;",
            "hits": 54,
            "miss": false
          },
          "34": {
            "source": "};",
            "miss": false
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "exports.startJob = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "37": {
            "source": "",
            "miss": false
          },
          "38": {
            "source": "    internals.Job.startJob(request.params.jobId, function () {",
            "hits": 1,
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 1,
            "miss": false
          },
          "41": {
            "source": "    });",
            "miss": false
          },
          "42": {
            "source": "};",
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "exports.startPullRequest = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "    var token = null;",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "    if (request.auth.credentials) {",
            "hits": 0,
            "miss": true
          },
          "48": {
            "source": "        token = request.auth.credentials.token;",
            "hits": 0,
            "miss": true
          },
          "49": {
            "source": "    }",
            "miss": false
          },
          "50": {
            "source": "    internals.Job.startPullRequest(request.params.jobId, request.params.pr, token, function () {",
            "hits": 0,
            "miss": true
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 0,
            "miss": true
          },
          "53": {
            "source": "    });",
            "miss": false
          },
          "54": {
            "source": "};",
            "miss": false
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "exports.getJobsView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "    internals.Job.getJobsConfig(function (config) {",
            "hits": 3,
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 3,
            "miss": false
          },
          "61": {
            "source": "        return reply.view('layout', config);",
            "hits": 3,
            "miss": false
          },
          "62": {
            "source": "    });",
            "miss": false
          },
          "63": {
            "source": "};",
            "miss": false
          },
          "64": {
            "source": "",
            "miss": false
          },
          "65": {
            "source": "exports.createJob = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "    internals.Job.createJob(request.payload, function (config) {",
            "hits": 3,
            "miss": false
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "        //console.log(config.id);",
            "miss": false
          },
          "70": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/job/' + config.id);",
            "hits": 3,
            "miss": false
          },
          "71": {
            "source": "    });",
            "miss": false
          },
          "72": {
            "source": "};",
            "miss": false
          },
          "73": {
            "source": "",
            "miss": false
          },
          "74": {
            "source": "exports.getJobView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "75": {
            "source": "",
            "miss": false
          },
          "76": {
            "source": "    var token = null;",
            "hits": 6,
            "miss": false
          },
          "77": {
            "source": "    if (request.auth.credentials) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "request.auth.credentials",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "78": {
            "source": "        token = request.auth.credentials.token;",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "    }",
            "miss": false
          },
          "80": {
            "source": "    internals.Job.getJobConfig(request.params.jobId, token, function (config) {",
            "hits": 6,
            "miss": false
          },
          "81": {
            "source": "",
            "miss": false
          },
          "82": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 6,
            "miss": false
          },
          "83": {
            "source": "        return reply.view('layout', config);",
            "hits": 6,
            "miss": false
          },
          "84": {
            "source": "    });",
            "miss": false
          },
          "85": {
            "source": "};",
            "miss": false
          },
          "86": {
            "source": "",
            "miss": false
          },
          "87": {
            "source": "exports.getCommitsView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "    internals.Job.getCommitsConfig(request.params.jobId, function (config) {",
            "hits": 1,
            "miss": false
          },
          "90": {
            "source": "",
            "miss": false
          },
          "91": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "92": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "93": {
            "source": "    });",
            "miss": false
          },
          "94": {
            "source": "};",
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "exports.getJobCreateView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "97": {
            "source": "",
            "miss": false
          },
          "98": {
            "source": "    internals.Job.getJobCreateConfig(function (config) {",
            "hits": 1,
            "miss": false
          },
          "99": {
            "source": "",
            "miss": false
          },
          "100": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "101": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "102": {
            "source": "    });",
            "miss": false
          },
          "103": {
            "source": "};",
            "miss": false
          },
          "104": {
            "source": "",
            "miss": false
          },
          "105": {
            "source": "exports.updateJob = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "106": {
            "source": "",
            "miss": false
          },
          "107": {
            "source": "    internals.Job.updateJob(request.params.jobId, request.payload, function () {",
            "hits": 1,
            "miss": false
          },
          "108": {
            "source": "",
            "miss": false
          },
          "109": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 1,
            "miss": false
          },
          "110": {
            "source": "    });",
            "miss": false
          },
          "111": {
            "source": "};",
            "miss": false
          },
          "112": {
            "source": "",
            "miss": false
          },
          "113": {
            "source": "exports.deleteJob = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "    internals.Job.deleteJob(request.params.jobId, function () {",
            "hits": 1,
            "miss": false
          },
          "116": {
            "source": "",
            "miss": false
          },
          "117": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/jobs');",
            "hits": 1,
            "miss": false
          },
          "118": {
            "source": "    });",
            "miss": false
          },
          "119": {
            "source": "};",
            "miss": false
          },
          "120": {
            "source": "",
            "miss": false
          },
          "121": {
            "source": "exports.deleteWorkspace = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "122": {
            "source": "",
            "miss": false
          },
          "123": {
            "source": "    internals.Job.deleteWorkspace(request.params.jobId, function () {",
            "hits": 1,
            "miss": false
          },
          "124": {
            "source": "",
            "miss": false
          },
          "125": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 1,
            "miss": false
          },
          "126": {
            "source": "    });",
            "miss": false
          },
          "127": {
            "source": "};",
            "miss": false
          },
          "128": {
            "source": "",
            "miss": false
          },
          "129": {
            "source": "exports.mergePullRequest = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "130": {
            "source": "",
            "miss": false
          },
          "131": {
            "source": "    var token = request.auth.credentials.token;",
            "hits": 0,
            "miss": true
          },
          "132": {
            "source": "    internals.Job.mergePullRequest(request.params.jobId, request.params.pr, token, function (result) {",
            "hits": 0,
            "miss": true
          },
          "133": {
            "source": "",
            "miss": false
          },
          "134": {
            "source": "        if (result.error) {",
            "hits": 0,
            "miss": true
          },
          "135": {
            "source": "            console.log(result.error);",
            "hits": 0,
            "miss": true
          },
          "136": {
            "source": "        }",
            "miss": false
          },
          "137": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 0,
            "miss": true
          },
          "138": {
            "source": "    });",
            "miss": false
          },
          "139": {
            "source": "};",
            "miss": false
          },
          "140": {
            "source": "",
            "miss": false
          },
          "141": {
            "source": "exports.retryPullRequest = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "142": {
            "source": "",
            "miss": false
          },
          "143": {
            "source": "    internals.Job.retryPullRequest(request.params.jobId, request.params.pr, function () {",
            "hits": 0,
            "miss": true
          },
          "144": {
            "source": "",
            "miss": false
          },
          "145": {
            "source": "        return reply.redirect(internals.Job.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 0,
            "miss": true
          },
          "146": {
            "source": "    });",
            "miss": false
          },
          "147": {
            "source": "};",
            "miss": false
          },
          "148": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/ui/queue.js",
        "percent": 100,
        "hits": 19,
        "misses": 0,
        "sloc": 19,
        "source": {
          "1": {
            "source": "var Utils = require('../utils');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "module.exports = internals.Queue = function (options) {",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "    this.settings = options;",
            "hits": 54,
            "miss": false
          },
          "8": {
            "source": "    internals.Queue.settings = options;",
            "hits": 54,
            "miss": false
          },
          "9": {
            "source": "    var utils = new Utils(options);",
            "hits": 54,
            "miss": false
          },
          "10": {
            "source": "    internals.Queue.addJob = utils.Queue.addJob;",
            "hits": 54,
            "miss": false
          },
          "11": {
            "source": "    internals.Queue.removeJob = utils.Queue.removeJob;",
            "hits": 54,
            "miss": false
          },
          "12": {
            "source": "    this.addJob = exports.addJob;",
            "hits": 54,
            "miss": false
          },
          "13": {
            "source": "    this.removeJob = exports.removeJob;",
            "hits": 54,
            "miss": false
          },
          "14": {
            "source": "};",
            "miss": false
          },
          "15": {
            "source": "",
            "miss": false
          },
          "16": {
            "source": "exports.addJob = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "    internals.Queue.addJob(request.params.jobId);",
            "hits": 4,
            "miss": false
          },
          "19": {
            "source": "    return reply.redirect(internals.Queue.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 4,
            "miss": false
          },
          "20": {
            "source": "};",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "exports.removeJob = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "23": {
            "source": "",
            "miss": false
          },
          "24": {
            "source": "    internals.Queue.removeJob(request.params.jobId);",
            "hits": 2,
            "miss": false
          },
          "25": {
            "source": "    return reply.redirect(internals.Queue.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 2,
            "miss": false
          },
          "26": {
            "source": "};",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/ui/reel.js",
        "percent": 100,
        "hits": 44,
        "misses": 0,
        "sloc": 44,
        "source": {
          "1": {
            "source": "var Utils = require('../utils');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "module.exports = internals.Reel = function (options) {",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "    this.settings = options;",
            "hits": 54,
            "miss": false
          },
          "8": {
            "source": "    internals.Reel.settings = options;",
            "hits": 54,
            "miss": false
          },
          "9": {
            "source": "    var utils = new Utils(options);",
            "hits": 54,
            "miss": false
          },
          "10": {
            "source": "    internals.Reel.createReel = utils.Reel.createReel;",
            "hits": 54,
            "miss": false
          },
          "11": {
            "source": "    internals.Reel.updateReel = utils.Reel.updateReel;",
            "hits": 54,
            "miss": false
          },
          "12": {
            "source": "    internals.Reel.deleteReel = utils.Reel.deleteReel;",
            "hits": 54,
            "miss": false
          },
          "13": {
            "source": "    internals.Reel.getReelConfig = utils.Reel.getReelConfig;",
            "hits": 54,
            "miss": false
          },
          "14": {
            "source": "    internals.Reel.getReelCreateConfig = utils.Reel.getReelCreateConfig;",
            "hits": 54,
            "miss": false
          },
          "15": {
            "source": "    this.createReel = exports.createReel;",
            "hits": 54,
            "miss": false
          },
          "16": {
            "source": "    this.updateReel = exports.updateReel;",
            "hits": 54,
            "miss": false
          },
          "17": {
            "source": "    this.deleteReel = exports.deleteReel;",
            "hits": 54,
            "miss": false
          },
          "18": {
            "source": "    this.getReelView = exports.getReelView;",
            "hits": 54,
            "miss": false
          },
          "19": {
            "source": "    this.getReelCreateView = exports.getReelCreateView;",
            "hits": 54,
            "miss": false
          },
          "20": {
            "source": "};",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "exports.getReelView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "23": {
            "source": "",
            "miss": false
          },
          "24": {
            "source": "    internals.Reel.getReelConfig(request.params.reelId, function (config) {",
            "hits": 1,
            "miss": false
          },
          "25": {
            "source": "",
            "miss": false
          },
          "26": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "27": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "28": {
            "source": "    });",
            "miss": false
          },
          "29": {
            "source": "};",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "exports.getReelCreateView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "    internals.Reel.getReelCreateConfig(function (config) {",
            "hits": 1,
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "36": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "37": {
            "source": "    });",
            "miss": false
          },
          "38": {
            "source": "};",
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "exports.createReel = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "    internals.Reel.createReel(request.payload, function (createConfig) {",
            "hits": 1,
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "        return reply.redirect(internals.Reel.settings.viewPath + '/reel/' + createConfig.id);",
            "hits": 1,
            "miss": false
          },
          "45": {
            "source": "    });",
            "miss": false
          },
          "46": {
            "source": "};",
            "miss": false
          },
          "47": {
            "source": "",
            "miss": false
          },
          "48": {
            "source": "exports.deleteReel = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "    internals.Reel.deleteReel(request.params.reelId, function () {",
            "hits": 1,
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "        return reply.redirect(internals.Reel.settings.viewPath + '/jobs');",
            "hits": 1,
            "miss": false
          },
          "53": {
            "source": "    });",
            "miss": false
          },
          "54": {
            "source": "};",
            "miss": false
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "exports.updateReel = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "    internals.Reel.updateReel(request.params.reelId, request.payload, function (updateConfig) {",
            "hits": 1,
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "        return reply.redirect(internals.Reel.settings.viewPath + '/reel/' + updateConfig.id);",
            "hits": 1,
            "miss": false
          },
          "61": {
            "source": "    });",
            "miss": false
          },
          "62": {
            "source": "};",
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/ui/run.js",
        "percent": 85.52631578947368,
        "hits": 65,
        "misses": 11,
        "sloc": 76,
        "source": {
          "1": {
            "source": "var Utils = require('../utils');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "module.exports = internals.Run = function (options) {",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "    internals.Run.settings = options;",
            "hits": 54,
            "miss": false
          },
          "8": {
            "source": "    var utils = new Utils(options);",
            "hits": 54,
            "miss": false
          },
          "9": {
            "source": "    internals.Run.getRunConfig = utils.Run.getRunConfig;",
            "hits": 54,
            "miss": false
          },
          "10": {
            "source": "    internals.Run.getPullRequestRunConfig = utils.Run.getPullRequestRunConfig;",
            "hits": 54,
            "miss": false
          },
          "11": {
            "source": "    internals.Run.getTestConfig = utils.Run.getTestConfig;",
            "hits": 54,
            "miss": false
          },
          "12": {
            "source": "    internals.Run.getCoverageConfig = utils.Run.getCoverageConfig;",
            "hits": 54,
            "miss": false
          },
          "13": {
            "source": "    internals.Run.getFileConfig = utils.Run.getFileConfig;",
            "hits": 54,
            "miss": false
          },
          "14": {
            "source": "    internals.Run.deleteRun = utils.Run.deleteRun;",
            "hits": 54,
            "miss": false
          },
          "15": {
            "source": "    internals.Run.cancelRun = utils.Run.cancelRun;",
            "hits": 54,
            "miss": false
          },
          "16": {
            "source": "    internals.Run.cancelPullRequest = utils.Run.cancelPullRequest;",
            "hits": 54,
            "miss": false
          },
          "17": {
            "source": "    this.startRun = exports.startRun;",
            "hits": 54,
            "miss": false
          },
          "18": {
            "source": "    this.getRunView = exports.getRunView;",
            "hits": 54,
            "miss": false
          },
          "19": {
            "source": "    this.getPullRequestRunView = exports.getPullRequestRunView;",
            "hits": 54,
            "miss": false
          },
          "20": {
            "source": "    this.getFileView = exports.getFileView;",
            "hits": 54,
            "miss": false
          },
          "21": {
            "source": "    this.getTestView = exports.getTestView;",
            "hits": 54,
            "miss": false
          },
          "22": {
            "source": "    this.getCoverageView = exports.getCoverageView;",
            "hits": 54,
            "miss": false
          },
          "23": {
            "source": "    this.deleteRun = exports.deleteRun;",
            "hits": 54,
            "miss": false
          },
          "24": {
            "source": "    this.cancelRun = exports.cancelRun;",
            "hits": 54,
            "miss": false
          },
          "25": {
            "source": "    this.cancelPullRequest = exports.cancelPullRequest;",
            "hits": 54,
            "miss": false
          },
          "26": {
            "source": "};",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "exports.getRunView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "29": {
            "source": "",
            "miss": false
          },
          "30": {
            "source": "    internals.Run.getRunConfig(request.params.jobId, request.params.runId, function (config) {",
            "hits": 2,
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 2,
            "miss": false
          },
          "33": {
            "source": "        return reply.view('layout', config);",
            "hits": 2,
            "miss": false
          },
          "34": {
            "source": "    });",
            "miss": false
          },
          "35": {
            "source": "};",
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "exports.getPullRequestRunView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "    var token = null;",
            "hits": 0,
            "miss": true
          },
          "40": {
            "source": "    if (request.auth.credentials) {",
            "hits": 0,
            "miss": true
          },
          "41": {
            "source": "        token = request.auth.credentials.token;",
            "hits": 0,
            "miss": true
          },
          "42": {
            "source": "    }",
            "miss": false
          },
          "43": {
            "source": "    internals.Run.getPullRequestRunConfig(request.params.jobId, request.params.pr, token, request.params.runId, function (config) {",
            "hits": 0,
            "miss": true
          },
          "44": {
            "source": "",
            "miss": false
          },
          "45": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "        return reply.view('layout', config);",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "    });",
            "miss": false
          },
          "48": {
            "source": "};",
            "miss": false
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "exports.getFileView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "    internals.Run.getFileConfig(request.params.jobId, request.params.runId, request.params.file, function (config) {",
            "hits": 1,
            "miss": false
          },
          "53": {
            "source": "",
            "miss": false
          },
          "54": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "55": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "56": {
            "source": "    });",
            "miss": false
          },
          "57": {
            "source": "};",
            "miss": false
          },
          "58": {
            "source": "",
            "miss": false
          },
          "59": {
            "source": "exports.getTestView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "    internals.Run.getTestConfig(request.params.jobId, request.params.runId, 'lab.json', function (config) {",
            "hits": 1,
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "64": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "65": {
            "source": "    });",
            "miss": false
          },
          "66": {
            "source": "};",
            "miss": false
          },
          "67": {
            "source": "",
            "miss": false
          },
          "68": {
            "source": "exports.getCoverageView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "69": {
            "source": "",
            "miss": false
          },
          "70": {
            "source": "    internals.Run.getCoverageConfig(request.params.jobId, request.params.runId, 'lab.json', function (config) {",
            "hits": 1,
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "73": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "74": {
            "source": "    });",
            "miss": false
          },
          "75": {
            "source": "};",
            "miss": false
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "exports.deleteRun = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "78": {
            "source": "",
            "miss": false
          },
          "79": {
            "source": "    internals.Run.deleteRun(request.params.jobId, request.params.runId, function () {",
            "hits": 1,
            "miss": false
          },
          "80": {
            "source": "",
            "miss": false
          },
          "81": {
            "source": "        return reply.redirect(internals.Run.settings.viewPath + '/job/' + request.params.jobId );",
            "hits": 1,
            "miss": false
          },
          "82": {
            "source": "    });",
            "miss": false
          },
          "83": {
            "source": "};",
            "miss": false
          },
          "84": {
            "source": "",
            "miss": false
          },
          "85": {
            "source": "exports.cancelRun = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "86": {
            "source": "",
            "miss": false
          },
          "87": {
            "source": "    internals.Run.cancelRun(request.params.jobId, request.params.runId, function () {",
            "hits": 1,
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "        return reply.redirect(internals.Run.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 1,
            "miss": false
          },
          "90": {
            "source": "    });",
            "miss": false
          },
          "91": {
            "source": "};",
            "miss": false
          },
          "92": {
            "source": "",
            "miss": false
          },
          "93": {
            "source": "exports.cancelPullRequest = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "94": {
            "source": "",
            "miss": false
          },
          "95": {
            "source": "    var token = null;",
            "hits": 0,
            "miss": true
          },
          "96": {
            "source": "    if (request.auth.credentials) {",
            "hits": 0,
            "miss": true
          },
          "97": {
            "source": "        token = request.auth.credentials.token;",
            "hits": 0,
            "miss": true
          },
          "98": {
            "source": "    }",
            "miss": false
          },
          "99": {
            "source": "    internals.Run.cancelPullRequest(request.params.jobId, request.params.pr, token, request.params.runId, function () {",
            "hits": 0,
            "miss": true
          },
          "100": {
            "source": "",
            "miss": false
          },
          "101": {
            "source": "        return reply.redirect(internals.Run.settings.viewPath + '/job/' + request.params.jobId);",
            "hits": 0,
            "miss": true
          },
          "102": {
            "source": "    });",
            "miss": false
          },
          "103": {
            "source": "};",
            "miss": false
          },
          "104": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/ui/user.js",
        "percent": 92.13483146067416,
        "hits": 164,
        "misses": 14,
        "sloc": 178,
        "source": {
          "1": {
            "source": "var Wreck = require('wreck');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Utils = require('../utils');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "",
            "miss": false
          },
          "4": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports = internals.User = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    this.settings = options;",
            "hits": 54,
            "miss": false
          },
          "9": {
            "source": "    internals.User.settings = options;",
            "hits": 54,
            "miss": false
          },
          "10": {
            "source": "    var utils = new Utils(options);",
            "hits": 54,
            "miss": false
          },
          "11": {
            "source": "    internals.User.createUser = utils.User.createUser;",
            "hits": 54,
            "miss": false
          },
          "12": {
            "source": "    internals.User.updateUser = utils.User.updateUser;",
            "hits": 54,
            "miss": false
          },
          "13": {
            "source": "    internals.User.deleteUser = utils.User.deleteUser;",
            "hits": 54,
            "miss": false
          },
          "14": {
            "source": "    internals.User.getUserConfig = utils.User.getUserConfig;",
            "hits": 54,
            "miss": false
          },
          "15": {
            "source": "    internals.User.getUsersConfig = utils.User.getUsersConfig;",
            "hits": 54,
            "miss": false
          },
          "16": {
            "source": "    internals.User.getUserCreateConfig = utils.User.getUserCreateConfig;",
            "hits": 54,
            "miss": false
          },
          "17": {
            "source": "    this.createUser = exports.createUser;",
            "hits": 54,
            "miss": false
          },
          "18": {
            "source": "    this.updateUser = exports.updateUser;",
            "hits": 54,
            "miss": false
          },
          "19": {
            "source": "    this.deleteUser = exports.deleteUser;",
            "hits": 54,
            "miss": false
          },
          "20": {
            "source": "    this.getUserView = exports.getUserView;",
            "hits": 54,
            "miss": false
          },
          "21": {
            "source": "    this.getUsersView = exports.getUsersView;",
            "hits": 54,
            "miss": false
          },
          "22": {
            "source": "    this.getUserCreateView = exports.getUserCreateView;",
            "hits": 54,
            "miss": false
          },
          "23": {
            "source": "    this.loginUser = exports.loginUser;",
            "hits": 54,
            "miss": false
          },
          "24": {
            "source": "    this.logoutUser = exports.logoutUser;",
            "hits": 54,
            "miss": false
          },
          "25": {
            "source": "    this.getLoginView = exports.getLoginView;",
            "hits": 54,
            "miss": false
          },
          "26": {
            "source": "    this.loginGithub = exports.loginGithub;",
            "hits": 54,
            "miss": false
          },
          "27": {
            "source": "};",
            "miss": false
          },
          "28": {
            "source": "",
            "miss": false
          },
          "29": {
            "source": "exports.getUserView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "    internals.User.getUserConfig(request.params.userId, function (config) {",
            "hits": 2,
            "miss": false
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 2,
            "miss": false
          },
          "34": {
            "source": "        return reply.view('layout', config);",
            "hits": 2,
            "miss": false
          },
          "35": {
            "source": "    });",
            "miss": false
          },
          "36": {
            "source": "};",
            "miss": false
          },
          "37": {
            "source": "",
            "miss": false
          },
          "38": {
            "source": "exports.getUsersView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "    internals.User.getUsersConfig(function (config) {",
            "hits": 1,
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "43": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "44": {
            "source": "    });",
            "miss": false
          },
          "45": {
            "source": "};",
            "miss": false
          },
          "46": {
            "source": "",
            "miss": false
          },
          "47": {
            "source": "exports.getUserCreateView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "48": {
            "source": "",
            "miss": false
          },
          "49": {
            "source": "    internals.User.getUserCreateConfig(function (config) {",
            "hits": 1,
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "        config.credentials = request.auth.credentials;",
            "hits": 1,
            "miss": false
          },
          "52": {
            "source": "        return reply.view('layout', config);",
            "hits": 1,
            "miss": false
          },
          "53": {
            "source": "    });",
            "miss": false
          },
          "54": {
            "source": "};",
            "miss": false
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "exports.createUser = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "    internals.User.createUser(request.payload, function (createConfig) {",
            "hits": 2,
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "        return reply.redirect(internals.User.settings.viewPath + '/user/' + createConfig.id);",
            "hits": 2,
            "miss": false
          },
          "61": {
            "source": "    });",
            "miss": false
          },
          "62": {
            "source": "};",
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "exports.deleteUser = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "    internals.User.deleteUser(request.params.userId, function () {",
            "hits": 1,
            "miss": false
          },
          "67": {
            "source": "",
            "miss": false
          },
          "68": {
            "source": "        return reply.redirect(internals.User.settings.viewPath + '/users');",
            "hits": 1,
            "miss": false
          },
          "69": {
            "source": "    });",
            "miss": false
          },
          "70": {
            "source": "};",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "exports.updateUser = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "73": {
            "source": "",
            "miss": false
          },
          "74": {
            "source": "    internals.User.updateUser(request.params.userId, request.payload, function (updateConfig) {",
            "hits": 2,
            "miss": false
          },
          "75": {
            "source": "",
            "miss": false
          },
          "76": {
            "source": "        return reply.redirect(internals.User.settings.viewPath + '/user/' + updateConfig.id);",
            "hits": 2,
            "miss": false
          },
          "77": {
            "source": "    });",
            "miss": false
          },
          "78": {
            "source": "};",
            "miss": false
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "exports.loginUser = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "81": {
            "source": "",
            "miss": false
          },
          "82": {
            "source": "    if (request.payload.type === 'github') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "request.payload.type === 'github'",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 8,
            "miss": true
          },
          "83": {
            "source": "        return reply.redirect(internals.User.settings.viewPath + '/login/github');",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "    }",
            "miss": false
          },
          "85": {
            "source": "    if (request.payload.name) {",
            "hits": 8,
            "miss": false
          },
          "86": {
            "source": "        if (request.payload.name === 'admin') {",
            "hits": 7,
            "miss": false
          },
          "87": {
            "source": "            Wreck.get(internals.User.settings.api.url + '/user/byname/' + request.payload.name, function (err, resp, pl) {",
            "hits": 3,
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "                var adminUser = null;",
            "hits": 3,
            "miss": false
          },
          "90": {
            "source": "                if (pl) {",
            "hits": 3,
            "miss": false
          },
          "91": {
            "source": "                    adminUser = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "92": {
            "source": "                }",
            "miss": false
          },
          "93": {
            "source": "                if (!adminUser) {",
            "hits": 3,
            "miss": false
          },
          "94": {
            "source": "                    var adminConfig = {",
            "hits": 1,
            "miss": false
          },
          "95": {
            "source": "                        name: 'admin',",
            "miss": false
          },
          "96": {
            "source": "                        type: 'local',",
            "miss": false
          },
          "97": {
            "source": "                        displayName: 'admin',",
            "miss": false
          },
          "98": {
            "source": "                        email: 'admin@localhost',",
            "miss": false
          },
          "99": {
            "source": "                        password: request.payload.password",
            "miss": false
          },
          "100": {
            "source": "                    };",
            "miss": false
          },
          "101": {
            "source": "                    Wreck.post(internals.User.settings.api.url + '/user', { headers: { 'Content-Type': 'application/json' }, payload: JSON.stringify(adminConfig) }, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "102": {
            "source": "",
            "miss": false
          },
          "103": {
            "source": "                        var createdUser = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "104": {
            "source": "                        request.auth.session.set({",
            "hits": 1,
            "miss": false
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "                            userId: createdUser.id,",
            "miss": false
          },
          "107": {
            "source": "                            name: createdUser.name,",
            "miss": false
          },
          "108": {
            "source": "                            displayName: createdUser.displayName,",
            "miss": false
          },
          "109": {
            "source": "                            url: internals.User.settings.viewPath + '/user/' + createdUser.id,",
            "miss": false
          },
          "110": {
            "source": "                            type: request.payload.type",
            "miss": false
          },
          "111": {
            "source": "                        });",
            "miss": false
          },
          "112": {
            "source": "                        console.log('created admin user');",
            "hits": 1,
            "miss": false
          },
          "113": {
            "source": "                        return reply.redirect('/');",
            "hits": 1,
            "miss": false
          },
          "114": {
            "source": "                    });",
            "miss": false
          },
          "115": {
            "source": "                } else {",
            "miss": false
          },
          "116": {
            "source": "                    var userConfig = {",
            "hits": 2,
            "miss": false
          },
          "117": {
            "source": "                        password: request.payload.password",
            "miss": false
          },
          "118": {
            "source": "                    };",
            "miss": false
          },
          "119": {
            "source": "                    Wreck.post(internals.User.settings.api.url + '/user/' + adminUser.id + '/validate', { headers: { 'Content-Type': 'application/json' }, payload: JSON.stringify(userConfig) }, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "120": {
            "source": "",
            "miss": false
          },
          "121": {
            "source": "                        if (pl === 'true') {",
            "hits": 2,
            "miss": false
          },
          "122": {
            "source": "                            request.auth.session.set({",
            "hits": 1,
            "miss": false
          },
          "123": {
            "source": "",
            "miss": false
          },
          "124": {
            "source": "                                userId: adminUser.id,",
            "miss": false
          },
          "125": {
            "source": "                                name: adminUser.name,",
            "miss": false
          },
          "126": {
            "source": "                                displayName: adminUser.displayName,",
            "miss": false
          },
          "127": {
            "source": "                                url: internals.User.settings.viewPath + '/user/' + adminUser.id,",
            "miss": false
          },
          "128": {
            "source": "                                type: request.payload.type",
            "miss": false
          },
          "129": {
            "source": "                            });",
            "miss": false
          },
          "130": {
            "source": "                            return reply.redirect('/');",
            "hits": 1,
            "miss": false
          },
          "131": {
            "source": "                        }",
            "miss": false
          },
          "132": {
            "source": "                        console.log('invalid admin password');",
            "hits": 1,
            "miss": false
          },
          "133": {
            "source": "                        return reply.redirect('/');",
            "hits": 1,
            "miss": false
          },
          "134": {
            "source": "                    });",
            "miss": false
          },
          "135": {
            "source": "                }",
            "miss": false
          },
          "136": {
            "source": "            });",
            "miss": false
          },
          "137": {
            "source": "        } else {",
            "miss": false
          },
          "138": {
            "source": "            // normal user",
            "miss": false
          },
          "139": {
            "source": "            Wreck.get(internals.User.settings.api.url + '/user/byname/' + request.payload.name, function (err, resp, pl) {",
            "hits": 4,
            "miss": false
          },
          "140": {
            "source": "",
            "miss": false
          },
          "141": {
            "source": "                var user = null;",
            "hits": 4,
            "miss": false
          },
          "142": {
            "source": "                if (pl) {",
            "hits": 4,
            "miss": false
          },
          "143": {
            "source": "                    user = JSON.parse(pl);",
            "hits": 3,
            "miss": false
          },
          "144": {
            "source": "                    var config = {",
            "hits": 3,
            "miss": false
          },
          "145": {
            "source": "                        password: request.payload.password",
            "miss": false
          },
          "146": {
            "source": "                    };",
            "miss": false
          },
          "147": {
            "source": "                    Wreck.post(internals.User.settings.api.url + '/user/' + user.id + '/validate', { headers: { 'Content-Type': 'application/json' }, payload: JSON.stringify(config) }, function (err, resp, pl) {",
            "hits": 3,
            "miss": false
          },
          "148": {
            "source": "",
            "miss": false
          },
          "149": {
            "source": "                        if (pl === 'true') {",
            "hits": 3,
            "miss": false
          },
          "150": {
            "source": "                            request.auth.session.set({",
            "hits": 1,
            "miss": false
          },
          "151": {
            "source": "",
            "miss": false
          },
          "152": {
            "source": "                                userId: user.id,",
            "miss": false
          },
          "153": {
            "source": "                                name: request.payload.name,",
            "miss": false
          },
          "154": {
            "source": "                                displayName: user.displayName,",
            "miss": false
          },
          "155": {
            "source": "                                url: internals.User.settings.viewPath + '/user/' + user.id,",
            "miss": false
          },
          "156": {
            "source": "                                type: request.payload.type",
            "miss": false
          },
          "157": {
            "source": "                            });",
            "miss": false
          },
          "158": {
            "source": "                            return reply.redirect('/');",
            "hits": 1,
            "miss": false
          },
          "159": {
            "source": "                        }",
            "miss": false
          },
          "160": {
            "source": "                        console.log(user.name + ' did not have a valid password');",
            "hits": 2,
            "miss": false
          },
          "161": {
            "source": "                        return reply.redirect('/');",
            "hits": 2,
            "miss": false
          },
          "162": {
            "source": "                    });",
            "miss": false
          },
          "163": {
            "source": "                } else {",
            "miss": false
          },
          "164": {
            "source": "                    console.log('not a valid username');",
            "hits": 1,
            "miss": false
          },
          "165": {
            "source": "                    return reply.redirect('/');",
            "hits": 1,
            "miss": false
          },
          "166": {
            "source": "                }",
            "miss": false
          },
          "167": {
            "source": "            });",
            "miss": false
          },
          "168": {
            "source": "        }",
            "miss": false
          },
          "169": {
            "source": "    } else {",
            "miss": false
          },
          "170": {
            "source": "        // you did not supply a name",
            "miss": false
          },
          "171": {
            "source": "        console.log('no username provided');",
            "hits": 1,
            "miss": false
          },
          "172": {
            "source": "        return reply.redirect('/');",
            "hits": 1,
            "miss": false
          },
          "173": {
            "source": "    }",
            "miss": false
          },
          "174": {
            "source": "};",
            "miss": false
          },
          "175": {
            "source": "",
            "miss": false
          },
          "176": {
            "source": "exports.logoutUser = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "177": {
            "source": "",
            "miss": false
          },
          "178": {
            "source": "    request.auth.session.clear();",
            "hits": 3,
            "miss": false
          },
          "179": {
            "source": "    return reply.redirect('/');",
            "hits": 3,
            "miss": false
          },
          "180": {
            "source": "};",
            "miss": false
          },
          "181": {
            "source": "",
            "miss": false
          },
          "182": {
            "source": "exports.getLoginView = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "183": {
            "source": "",
            "miss": false
          },
          "184": {
            "source": "    return reply.view('layout', {});",
            "hits": 1,
            "miss": false
          },
          "185": {
            "source": "};",
            "miss": false
          },
          "186": {
            "source": "",
            "miss": false
          },
          "187": {
            "source": "exports.loginGithub = function (request, reply) {",
            "hits": 1,
            "miss": false
          },
          "188": {
            "source": "",
            "miss": false
          },
          "189": {
            "source": "    if (request.auth.isAuthenticated) {",
            "hits": 0,
            "miss": true
          },
          "190": {
            "source": "        Wreck.get(internals.User.settings.api.url + '/user/byname/' + request.auth.credentials.profile.username, function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "191": {
            "source": "",
            "miss": false
          },
          "192": {
            "source": "            var user = null;",
            "hits": 0,
            "miss": true
          },
          "193": {
            "source": "            if (pl) {",
            "hits": 0,
            "miss": true
          },
          "194": {
            "source": "                user = JSON.parse(pl);",
            "hits": 0,
            "miss": true
          },
          "195": {
            "source": "            }",
            "miss": false
          },
          "196": {
            "source": "            if (user === 'admin') {",
            "hits": 0,
            "miss": true
          },
          "197": {
            "source": "                // might be possible in internal github",
            "miss": false
          },
          "198": {
            "source": "                console.log('admin is a reserved account name');",
            "hits": 0,
            "miss": true
          },
          "199": {
            "source": "            } else if (!user) {",
            "hits": 0,
            "miss": true
          },
          "200": {
            "source": "                console.log(request.auth.credentials.profile.username + ' is not authorized');",
            "hits": 0,
            "miss": true
          },
          "201": {
            "source": "            } else {",
            "miss": false
          },
          "202": {
            "source": "                request.auth.session.set({",
            "hits": 0,
            "miss": true
          },
          "203": {
            "source": "",
            "miss": false
          },
          "204": {
            "source": "                    userId: request.auth.credentials.profile.id,",
            "miss": false
          },
          "205": {
            "source": "                    name: request.auth.credentials.profile.username,",
            "miss": false
          },
          "206": {
            "source": "                    token: request.auth.credentials.token,",
            "miss": false
          },
          "207": {
            "source": "                    displayName: request.auth.credentials.profile.displayName,",
            "miss": false
          },
          "208": {
            "source": "                    url: request.auth.credentials.profile.raw.html_url,",
            "miss": false
          },
          "209": {
            "source": "                    type: 'github'",
            "miss": false
          },
          "210": {
            "source": "                });",
            "miss": false
          },
          "211": {
            "source": "            }",
            "miss": false
          },
          "212": {
            "source": "            return reply.redirect('/');",
            "hits": 0,
            "miss": true
          },
          "213": {
            "source": "        });",
            "miss": false
          },
          "214": {
            "source": "    } else {",
            "miss": false
          },
          "215": {
            "source": "        return reply.redirect('/');",
            "hits": 0,
            "miss": true
          },
          "216": {
            "source": "    }",
            "miss": false
          },
          "217": {
            "source": "};",
            "miss": false
          },
          "218": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/utils/common.js",
        "percent": 100,
        "hits": 19,
        "misses": 0,
        "sloc": 19,
        "source": {
          "1": {
            "source": "var Wreck = require('wreck');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Queue = require('./queue');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "",
            "miss": false
          },
          "4": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports = internals.Common = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    this.settings = options;",
            "hits": 1080,
            "miss": false
          },
          "9": {
            "source": "    internals.Common.settings = options;",
            "hits": 1080,
            "miss": false
          },
          "10": {
            "source": "    var queue = new Queue(options);",
            "hits": 1080,
            "miss": false
          },
          "11": {
            "source": "    internals.Common.getQueue = queue.getQueue;",
            "hits": 1080,
            "miss": false
          },
          "12": {
            "source": "    this.getCommonConfig = exports.getCommonConfig;",
            "hits": 1080,
            "miss": false
          },
          "13": {
            "source": "};",
            "miss": false
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "exports.getCommonConfig = function (cb) {",
            "hits": 1,
            "miss": false
          },
          "16": {
            "source": "",
            "miss": false
          },
          "17": {
            "source": "    Wreck.get(internals.Common.settings.api.url + '/reels', function (err, resp, pl) {",
            "hits": 20,
            "miss": false
          },
          "18": {
            "source": "",
            "miss": false
          },
          "19": {
            "source": "        var config = {",
            "hits": 20,
            "miss": false
          },
          "20": {
            "source": "            reels: JSON.parse(pl),",
            "miss": false
          },
          "21": {
            "source": "            queue: internals.Common.getQueue()",
            "miss": false
          },
          "22": {
            "source": "        };",
            "miss": false
          },
          "23": {
            "source": "        return cb(config);",
            "hits": 20,
            "miss": false
          },
          "24": {
            "source": "    });",
            "miss": false
          },
          "25": {
            "source": "};",
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/utils/job.js",
        "percent": 85.30973451327434,
        "hits": 482,
        "misses": 83,
        "sloc": 565,
        "source": {
          "1": {
            "source": "var DateFormat = require('dateformat');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "var Wreck = require('wreck');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Common = require('./common');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "module.exports = internals.Job = function (options) {",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "    this.settings = options;",
            "hits": 270,
            "miss": false
          },
          "11": {
            "source": "    internals.Job.settings = options;",
            "hits": 270,
            "miss": false
          },
          "12": {
            "source": "    var common = new Common(options);",
            "hits": 270,
            "miss": false
          },
          "13": {
            "source": "    internals.Job.getCommonConfig = common.getCommonConfig;",
            "hits": 270,
            "miss": false
          },
          "14": {
            "source": "    this.getJobsConfig = exports.getJobsConfig;",
            "hits": 270,
            "miss": false
          },
          "15": {
            "source": "    this.getJobConfig = exports.getJobConfig;",
            "hits": 270,
            "miss": false
          },
          "16": {
            "source": "    this.getJobCreateConfig = exports.getJobCreateConfig;",
            "hits": 270,
            "miss": false
          },
          "17": {
            "source": "    this.getCommitsConfig = exports.getCommitsConfig;",
            "hits": 270,
            "miss": false
          },
          "18": {
            "source": "    this.startJob = exports.startJob;",
            "hits": 270,
            "miss": false
          },
          "19": {
            "source": "    this.startPullRequest = exports.startPullRequest;",
            "hits": 270,
            "miss": false
          },
          "20": {
            "source": "    this.createJob = exports.createJob;",
            "hits": 270,
            "miss": false
          },
          "21": {
            "source": "    this.deleteJob = exports.deleteJob;",
            "hits": 270,
            "miss": false
          },
          "22": {
            "source": "    this.deleteWorkspace = exports.deleteWorkspace;",
            "hits": 270,
            "miss": false
          },
          "23": {
            "source": "    this.updateJob = exports.updateJob;",
            "hits": 270,
            "miss": false
          },
          "24": {
            "source": "    this.mergePullRequest = exports.mergePullRequest;",
            "hits": 270,
            "miss": false
          },
          "25": {
            "source": "    this.retryPullRequest = exports.retryPullRequest;",
            "hits": 270,
            "miss": false
          },
          "26": {
            "source": "};",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "exports.startJob = function (jobId, cb) {",
            "hits": 1,
            "miss": false
          },
          "29": {
            "source": "",
            "miss": false
          },
          "30": {
            "source": "    Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/start', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "        //console.log(pl);",
            "miss": false
          },
          "33": {
            "source": "        var runId = pl;",
            "hits": 1,
            "miss": false
          },
          "34": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "35": {
            "source": "    });",
            "miss": false
          },
          "36": {
            "source": "};",
            "miss": false
          },
          "37": {
            "source": "",
            "miss": false
          },
          "38": {
            "source": "exports.startPullRequest = function (jobId, number, token, cb) {",
            "hits": 1,
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "    Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/pr/' + number, function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "        var pr = JSON.parse(pl);",
            "hits": 0,
            "miss": true
          },
          "43": {
            "source": "        Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/pr/' + number + '/start', function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "44": {
            "source": "",
            "miss": false
          },
          "45": {
            "source": "            var runId = pl;",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "            return cb(runId);",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "        });",
            "miss": false
          },
          "48": {
            "source": "    });",
            "miss": false
          },
          "49": {
            "source": "};",
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "exports.getJobsConfig = function (cb) {",
            "hits": 1,
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "    internals.Job.getCommonConfig(function (commonConfig) {",
            "hits": 3,
            "miss": false
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "        var config = {",
            "hits": 3,
            "miss": false
          },
          "56": {
            "source": "           viewJobs: true,",
            "miss": false
          },
          "57": {
            "source": "           jobs: []",
            "miss": false
          },
          "58": {
            "source": "        };",
            "miss": false
          },
          "59": {
            "source": "        Wreck.get(internals.Job.settings.api.url + '/jobs', function (err, resp, pl) {",
            "hits": 3,
            "miss": false
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "            var jobs = JSON.parse(pl);",
            "hits": 3,
            "miss": false
          },
          "62": {
            "source": "            var getLastName = function getLastRun (i) {",
            "hits": 3,
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "                if (i < jobs.length) {",
            "hits": 12,
            "miss": false
          },
          "65": {
            "source": "                    Wreck.get(internals.Job.settings.api.url + '/job/' + jobs[i].id + '/run/byname/last', { json: 'force' }, function (err, resp, pl) {",
            "hits": 9,
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "                        var job = jobs[i];",
            "hits": 9,
            "miss": false
          },
          "68": {
            "source": "                        job.jobId = job.id;",
            "hits": 9,
            "miss": false
          },
          "69": {
            "source": "                        var lastRun = null;",
            "hits": 9,
            "miss": false
          },
          "70": {
            "source": "                        //console.log(pl);",
            "miss": false
          },
          "71": {
            "source": "                        if (pl !== null && !pl.statusCode) {",
            "hits": 9,
            "miss": false
          },
          "72": {
            "source": "                            lastRun = pl;",
            "hits": 3,
            "miss": false
          },
          "73": {
            "source": "                            job.runId = lastRun.id;",
            "hits": 3,
            "miss": false
          },
          "74": {
            "source": "                            if (lastRun.status === 'succeeded' ) {",
            "hits": 3,
            "miss": false
          },
          "75": {
            "source": "                                job.classColor = 'success';",
            "hits": 2,
            "miss": false
          },
          "76": {
            "source": "                            }",
            "miss": false
          },
          "77": {
            "source": "                            if (lastRun.status === 'failed') {",
            "hits": 3,
            "miss": false
          },
          "78": {
            "source": "                                job.classColor = 'danger';",
            "hits": 1,
            "miss": false
          },
          "79": {
            "source": "                            }",
            "miss": false
          },
          "80": {
            "source": "                        }",
            "miss": false
          },
          "81": {
            "source": "                        config.jobs.push(job);",
            "hits": 9,
            "miss": false
          },
          "82": {
            "source": "                        getLastRun(i + 1);",
            "hits": 9,
            "miss": false
          },
          "83": {
            "source": "                    });",
            "miss": false
          },
          "84": {
            "source": "                } else {",
            "miss": false
          },
          "85": {
            "source": "                    Hoek.merge(config, commonConfig);",
            "hits": 3,
            "miss": false
          },
          "86": {
            "source": "                    return cb(config);",
            "hits": 3,
            "miss": false
          },
          "87": {
            "source": "                }",
            "miss": false
          },
          "88": {
            "source": "            };",
            "miss": false
          },
          "89": {
            "source": "            getLastName(0);",
            "hits": 3,
            "miss": false
          },
          "90": {
            "source": "        });",
            "miss": false
          },
          "91": {
            "source": "    });",
            "miss": false
          },
          "92": {
            "source": "};",
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "exports.createJob = function (payload, cb) {",
            "hits": 1,
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "    var headCommands = [];",
            "hits": 3,
            "miss": false
          },
          "97": {
            "source": "    var bodyCommands = [];",
            "hits": 3,
            "miss": false
          },
          "98": {
            "source": "    var tailCommands = [];",
            "hits": 3,
            "miss": false
          },
          "99": {
            "source": "    for (var key in payload) {",
            "hits": 3,
            "miss": false
          },
          "100": {
            "source": "        if (key.match('headCommand')) {",
            "hits": 21,
            "miss": false
          },
          "101": {
            "source": "            if (payload[key] !== '') {",
            "hits": 2,
            "miss": false
          },
          "102": {
            "source": "                headCommands.push(payload[key]);",
            "hits": 1,
            "miss": false
          },
          "103": {
            "source": "            }",
            "miss": false
          },
          "104": {
            "source": "            delete payload[key];",
            "hits": 2,
            "miss": false
          },
          "105": {
            "source": "        }",
            "miss": false
          },
          "106": {
            "source": "        if (key.match('bodyCommand')) {",
            "hits": 21,
            "miss": false
          },
          "107": {
            "source": "            if (payload[key] !== '') {",
            "hits": 4,
            "miss": false
          },
          "108": {
            "source": "                bodyCommands.push(payload[key]);",
            "hits": 3,
            "miss": false
          },
          "109": {
            "source": "            }",
            "miss": false
          },
          "110": {
            "source": "            delete payload[key];",
            "hits": 4,
            "miss": false
          },
          "111": {
            "source": "        }",
            "miss": false
          },
          "112": {
            "source": "        if (key.match('tailCommand')) {",
            "hits": 21,
            "miss": false
          },
          "113": {
            "source": "            if (payload[key] !== '') {",
            "hits": 2,
            "miss": false
          },
          "114": {
            "source": "                tailCommands.push(payload[key]);",
            "hits": 1,
            "miss": false
          },
          "115": {
            "source": "            }",
            "miss": false
          },
          "116": {
            "source": "            delete payload[key];",
            "hits": 2,
            "miss": false
          },
          "117": {
            "source": "        }",
            "miss": false
          },
          "118": {
            "source": "    }",
            "miss": false
          },
          "119": {
            "source": "    payload.head = headCommands;",
            "hits": 3,
            "miss": false
          },
          "120": {
            "source": "    payload.body = bodyCommands;",
            "hits": 3,
            "miss": false
          },
          "121": {
            "source": "    payload.tail = tailCommands;",
            "hits": 3,
            "miss": false
          },
          "122": {
            "source": "    var config = {",
            "hits": 3,
            "miss": false
          },
          "123": {
            "source": "        name: payload.name,",
            "miss": false
          },
          "124": {
            "source": "        description: payload.description,",
            "miss": false
          },
          "125": {
            "source": "        head: payload.head,",
            "miss": false
          },
          "126": {
            "source": "        body: payload.body,",
            "miss": false
          },
          "127": {
            "source": "        tail: payload.tail",
            "miss": false
          },
          "128": {
            "source": "    };",
            "miss": false
          },
          "129": {
            "source": "    if (payload.scmType === 'git') {",
            "hits": 3,
            "miss": false
          },
          "130": {
            "source": "        config.scm = {",
            "hits": 2,
            "miss": false
          },
          "131": {
            "source": "            type: payload.scmType,",
            "miss": false
          },
          "132": {
            "source": "            url: payload.scmUrl,",
            "miss": false
          },
          "133": {
            "source": "            branch: payload.scmBranch",
            "miss": false
          },
          "134": {
            "source": "        };",
            "miss": false
          },
          "135": {
            "source": "        if (payload.scmPrs) {",
            "hits": 2,
            "miss": false
          },
          "136": {
            "source": "            config.scm.prs = true;",
            "hits": 1,
            "miss": false
          },
          "137": {
            "source": "        } else {",
            "miss": false
          },
          "138": {
            "source": "            config.scm.prs = false;",
            "hits": 1,
            "miss": false
          },
          "139": {
            "source": "        }",
            "miss": false
          },
          "140": {
            "source": "        if (payload.scmRunOnCommit) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "payload.scmRunOnCommit",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 2,
            "miss": true
          },
          "141": {
            "source": "            config.scm.runOnCommit = true;",
            "hits": 0,
            "miss": true
          },
          "142": {
            "source": "        } else {",
            "miss": false
          },
          "143": {
            "source": "            config.scm.runOnCommit = false;",
            "hits": 2,
            "miss": false
          },
          "144": {
            "source": "        }",
            "miss": false
          },
          "145": {
            "source": "    }",
            "miss": false
          },
          "146": {
            "source": "    if (payload.cronPattern !== '') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "payload.cronPattern !== ''",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "147": {
            "source": "        config.schedule = {",
            "hits": 3,
            "miss": false
          },
          "148": {
            "source": "            type: payload.scheduleType,",
            "miss": false
          },
          "149": {
            "source": "            pattern: payload.cronPattern",
            "miss": false
          },
          "150": {
            "source": "        };",
            "miss": false
          },
          "151": {
            "source": "    } else {",
            "miss": false
          },
          "152": {
            "source": "        config.schedule = {",
            "hits": 0,
            "miss": true
          },
          "153": {
            "source": "            type: 'none',",
            "miss": false
          },
          "154": {
            "source": "            pattern: payload.cronPattern",
            "miss": false
          },
          "155": {
            "source": "        };",
            "miss": false
          },
          "156": {
            "source": "    }",
            "miss": false
          },
          "157": {
            "source": "    if (payload.archivePattern !== '') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "payload.archivePattern !== ''",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "158": {
            "source": "        config.archive = {",
            "hits": 3,
            "miss": false
          },
          "159": {
            "source": "            pattern: payload.archivePattern",
            "miss": false
          },
          "160": {
            "source": "        };",
            "miss": false
          },
          "161": {
            "source": "    }",
            "miss": false
          },
          "162": {
            "source": "    Wreck.post(internals.Job.settings.api.url + '/job', { payload: JSON.stringify(config) }, function (err, resp, pl) {",
            "hits": 3,
            "miss": false
          },
          "163": {
            "source": "",
            "miss": false
          },
          "164": {
            "source": "        var createConfig = JSON.parse(pl);",
            "hits": 3,
            "miss": false
          },
          "165": {
            "source": "        var jobId = createConfig.id;",
            "hits": 3,
            "miss": false
          },
          "166": {
            "source": "        return cb(createConfig);",
            "hits": 3,
            "miss": false
          },
          "167": {
            "source": "    });",
            "miss": false
          },
          "168": {
            "source": "};",
            "miss": false
          },
          "169": {
            "source": "",
            "miss": false
          },
          "170": {
            "source": "exports.getJobCreateConfig = function (cb) {",
            "hits": 1,
            "miss": false
          },
          "171": {
            "source": "",
            "miss": false
          },
          "172": {
            "source": "    internals.Job.getCommonConfig(function (commonConfig) {",
            "hits": 1,
            "miss": false
          },
          "173": {
            "source": "",
            "miss": false
          },
          "174": {
            "source": "        var config = {};",
            "hits": 1,
            "miss": false
          },
          "175": {
            "source": "        config.postUrl = internals.Job.settings.viewPath + '/job';",
            "hits": 1,
            "miss": false
          },
          "176": {
            "source": "        config.viewJob = true;",
            "hits": 1,
            "miss": false
          },
          "177": {
            "source": "        config.scheduleType = 'none';",
            "hits": 1,
            "miss": false
          },
          "178": {
            "source": "        Hoek.merge(config, commonConfig);",
            "hits": 1,
            "miss": false
          },
          "179": {
            "source": "        return cb(config);",
            "hits": 1,
            "miss": false
          },
          "180": {
            "source": "    });",
            "miss": false
          },
          "181": {
            "source": "};",
            "miss": false
          },
          "182": {
            "source": "",
            "miss": false
          },
          "183": {
            "source": "exports.getJobConfig = function (jobId, token, cb) {",
            "hits": 1,
            "miss": false
          },
          "184": {
            "source": "",
            "miss": false
          },
          "185": {
            "source": "    internals.Job.getCommonConfig(function (commonConfig) {",
            "hits": 6,
            "miss": false
          },
          "186": {
            "source": "",
            "miss": false
          },
          "187": {
            "source": "        var finishedRuns = [];",
            "hits": 6,
            "miss": false
          },
          "188": {
            "source": "        var activeRuns = [];",
            "hits": 6,
            "miss": false
          },
          "189": {
            "source": "        Wreck.get(internals.Job.settings.api.url + '/job/' + jobId, function (err, resp, pl) {",
            "hits": 6,
            "miss": false
          },
          "190": {
            "source": "",
            "miss": false
          },
          "191": {
            "source": "            //console.log(pl);",
            "miss": false
          },
          "192": {
            "source": "            var job = {};",
            "hits": 6,
            "miss": false
          },
          "193": {
            "source": "            if (pl) {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "pl",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "194": {
            "source": "                job = JSON.parse(pl);",
            "hits": 6,
            "miss": false
          },
          "195": {
            "source": "            }",
            "miss": false
          },
          "196": {
            "source": "            if (!job.schedule) {",
            "hits": 6,
            "miss": false
          },
          "197": {
            "source": "                job.schedule = {};",
            "hits": 1,
            "miss": false
          },
          "198": {
            "source": "            }",
            "miss": false
          },
          "199": {
            "source": "            if (!job.archive) {",
            "hits": 6,
            "miss": false
          },
          "200": {
            "source": "                job.archive = {};",
            "hits": 1,
            "miss": false
          },
          "201": {
            "source": "            }",
            "miss": false
          },
          "202": {
            "source": "            var config = {",
            "hits": 6,
            "miss": false
          },
          "203": {
            "source": "                postUrl: internals.Job.settings.viewPath + '/job/' + job.id,",
            "miss": false
          },
          "204": {
            "source": "                viewJob: true,",
            "miss": false
          },
          "205": {
            "source": "                jobId: job.id,",
            "miss": false
          },
          "206": {
            "source": "                name: job.name,",
            "miss": false
          },
          "207": {
            "source": "                description: job.description,",
            "miss": false
          },
          "208": {
            "source": "                head: job.head,",
            "miss": false
          },
          "209": {
            "source": "                scheduleType: job.schedule.type,",
            "miss": false
          },
          "210": {
            "source": "                cronPattern: job.schedule.pattern,",
            "miss": false
          },
          "211": {
            "source": "                archivePattern: job.archive.pattern,",
            "miss": false
          },
          "212": {
            "source": "                body: job.body,",
            "miss": false
          },
          "213": {
            "source": "                tail: job.tail",
            "miss": false
          },
          "214": {
            "source": "            };",
            "miss": false
          },
          "215": {
            "source": "            // convert to form",
            "miss": false
          },
          "216": {
            "source": "            if (job.head) {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "job.head",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "217": {
            "source": "                for (var i = 0; i < job.head.length; i++) {",
            "hits": 6,
            "miss": false
          },
          "218": {
            "source": "                    var keyName1 = 'headCommand' + i;",
            "hits": 1,
            "miss": false
          },
          "219": {
            "source": "                    config[keyName1] = job.head[i];",
            "hits": 1,
            "miss": false
          },
          "220": {
            "source": "                }",
            "miss": false
          },
          "221": {
            "source": "            }",
            "miss": false
          },
          "222": {
            "source": "            if (job.body) {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "job.body",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "223": {
            "source": "                for (var j = 0; j < job.body.length; j++) {",
            "hits": 6,
            "miss": false
          },
          "224": {
            "source": "                    var keyName2 = 'bodyCommand' + j;",
            "hits": 11,
            "miss": false
          },
          "225": {
            "source": "                    config[keyName2] = job.body[j];",
            "hits": 11,
            "miss": false
          },
          "226": {
            "source": "                }",
            "miss": false
          },
          "227": {
            "source": "            }",
            "miss": false
          },
          "228": {
            "source": "            if (job.tail) {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "job.tail",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "229": {
            "source": "                for (var k = 0; k < job.tail.length; k++) {",
            "hits": 6,
            "miss": false
          },
          "230": {
            "source": "                    var keyName3 = 'tailCommand' + k;",
            "hits": 1,
            "miss": false
          },
          "231": {
            "source": "                    config[keyName3] = job.tail[k];",
            "hits": 1,
            "miss": false
          },
          "232": {
            "source": "                }",
            "miss": false
          },
          "233": {
            "source": "            }",
            "miss": false
          },
          "234": {
            "source": "            Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/runs', function (err, resp, pl) {",
            "hits": 6,
            "miss": false
          },
          "235": {
            "source": "",
            "miss": false
          },
          "236": {
            "source": "                var runs = JSON.parse(pl);",
            "hits": 6,
            "miss": false
          },
          "237": {
            "source": "                for (var i = 0; i < runs.length; i++) {",
            "hits": 6,
            "miss": false
          },
          "238": {
            "source": "                    var runId = runs[i].id;",
            "hits": 17,
            "miss": false
          },
          "239": {
            "source": "                    var run = runs[i];",
            "hits": 17,
            "miss": false
          },
          "240": {
            "source": "                    var shortId = runId.split('-')[0];",
            "hits": 17,
            "miss": false
          },
          "241": {
            "source": "                    var formatTime;",
            "hits": 17,
            "miss": false
          },
          "242": {
            "source": "                    var elapsedTime;",
            "hits": 17,
            "miss": false
          },
          "243": {
            "source": "                    var runConfig = {",
            "hits": 17,
            "miss": false
          },
          "244": {
            "source": "                        jobId: jobId,",
            "miss": false
          },
          "245": {
            "source": "                        runId: runId,",
            "miss": false
          },
          "246": {
            "source": "                        shortId: shortId,",
            "miss": false
          },
          "247": {
            "source": "                        createTime: run.createTime,",
            "miss": false
          },
          "248": {
            "source": "                        startTime: run.startTime,",
            "miss": false
          },
          "249": {
            "source": "                        status: run.status",
            "miss": false
          },
          "250": {
            "source": "                    };",
            "miss": false
          },
          "251": {
            "source": "                    if (run.finishTime) {",
            "hits": 17,
            "miss": false
          },
          "252": {
            "source": "                        formatTime = DateFormat(run.finishTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 13,
            "miss": false
          },
          "253": {
            "source": "                        elapsedTime = run.finishTime - run.startTime;",
            "hits": 13,
            "miss": false
          },
          "254": {
            "source": "                        runConfig.finishTime = formatTime;",
            "hits": 13,
            "miss": false
          },
          "255": {
            "source": "                        runConfig.elapsedTime = Math.round(elapsedTime / 1000);",
            "hits": 13,
            "miss": false
          },
          "256": {
            "source": "                    } else {",
            "miss": false
          },
          "257": {
            "source": "                        runConfig.finishTime = 'died';",
            "hits": 4,
            "miss": false
          },
          "258": {
            "source": "                        runConfig.classColor = 'info';",
            "hits": 4,
            "miss": false
          },
          "259": {
            "source": "                    }",
            "miss": false
          },
          "260": {
            "source": "                    if (run.status === 'succeeded' ) {",
            "hits": 17,
            "miss": false
          },
          "261": {
            "source": "                        runConfig.classColor = 'success';",
            "hits": 7,
            "miss": false
          },
          "262": {
            "source": "                    }",
            "miss": false
          },
          "263": {
            "source": "                    if (run.status === 'failed') {",
            "hits": 17,
            "miss": false
          },
          "264": {
            "source": "                        runConfig.classColor = 'danger';",
            "hits": 3,
            "miss": false
          },
          "265": {
            "source": "                    }",
            "miss": false
          },
          "266": {
            "source": "                    finishedRuns.push(runConfig);",
            "hits": 17,
            "miss": false
          },
          "267": {
            "source": "                }",
            "miss": false
          },
          "268": {
            "source": "                var lastRunId = null;",
            "hits": 6,
            "miss": false
          },
          "269": {
            "source": "                var lastCommit;",
            "hits": 6,
            "miss": false
          },
          "270": {
            "source": "                var comparePayload = {};",
            "hits": 6,
            "miss": false
          },
          "271": {
            "source": "                if (runs.length > 0) {",
            "hits": 6,
            "miss": false
          },
          "272": {
            "source": "                    lastRunId = runs[0].id;",
            "hits": 5,
            "miss": false
          },
          "273": {
            "source": "                    config.runId = lastRunId;",
            "hits": 5,
            "miss": false
          },
          "274": {
            "source": "                    lastCommit = runs[0].commit;",
            "hits": 5,
            "miss": false
          },
          "275": {
            "source": "                    comparePayload.commit1 = lastCommit;",
            "hits": 5,
            "miss": false
          },
          "276": {
            "source": "                    comparePayload.commit2 = lastCommit;",
            "hits": 5,
            "miss": false
          },
          "277": {
            "source": "                    config.lastCommit = lastCommit;",
            "hits": 5,
            "miss": false
          },
          "278": {
            "source": "                    if (runs.length > 1) {",
            "hits": 5,
            "miss": false
          },
          "279": {
            "source": "                        if (runs[1].commit) {",
            "chunks": [
              {
                "source": "                        if ("
              },
              {
                "source": "runs[1].commit",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "280": {
            "source": "                            comparePayload.commit2 = runs[1].commit;",
            "hits": 0,
            "miss": true
          },
          "281": {
            "source": "                        }",
            "miss": false
          },
          "282": {
            "source": "                    }",
            "miss": false
          },
          "283": {
            "source": "                }",
            "miss": false
          },
          "284": {
            "source": "                Wreck.post(internals.Job.settings.api.url + '/job/' + jobId + '/commits/compare', { payload: JSON.stringify(comparePayload) }, function (err, resp, pl) {",
            "hits": 6,
            "miss": false
          },
          "285": {
            "source": "",
            "miss": false
          },
          "286": {
            "source": "                    config.compareCommits = JSON.parse(pl);",
            "hits": 6,
            "miss": false
          },
          "287": {
            "source": "                    Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/run/' + lastRunId + '/pids', function (err, resp, pl) {",
            "hits": 6,
            "miss": false
          },
          "288": {
            "source": "",
            "miss": false
          },
          "289": {
            "source": "                        var pids = JSON.parse(pl);",
            "hits": 6,
            "miss": false
          },
          "290": {
            "source": "                        if (pids[0]) {",
            "hits": 6,
            "miss": false
          },
          "291": {
            "source": "                            var shortId = runs[0].id.split('-')[0];",
            "hits": 4,
            "miss": false
          },
          "292": {
            "source": "                            var runConfig = {",
            "hits": 4,
            "miss": false
          },
          "293": {
            "source": "                                jobId: jobId,",
            "miss": false
          },
          "294": {
            "source": "                                runId: runs[0].id,",
            "miss": false
          },
          "295": {
            "source": "                                shortId: shortId,",
            "miss": false
          },
          "296": {
            "source": "                                createTime: run.createTime,",
            "miss": false
          },
          "297": {
            "source": "                                startTime: run.startTime,",
            "miss": false
          },
          "298": {
            "source": "                                status: run.status",
            "miss": false
          },
          "299": {
            "source": "                            };",
            "miss": false
          },
          "300": {
            "source": "                            //console.log(pids);",
            "miss": false
          },
          "301": {
            "source": "                            //figure out prev run",
            "miss": false
          },
          "302": {
            "source": "                            var percent = 0;",
            "hits": 4,
            "miss": false
          },
          "303": {
            "source": "                            var now = new Date().getTime();",
            "hits": 4,
            "miss": false
          },
          "304": {
            "source": "                            elapsedTime = now - runs[0].startTime;",
            "hits": 4,
            "miss": false
          },
          "305": {
            "source": "                            if (runs.length !== 1 ) {",
            "hits": 4,
            "miss": false
          },
          "306": {
            "source": "                                var prevRun = runs[1];",
            "hits": 2,
            "miss": false
          },
          "307": {
            "source": "                                //if (prevRun.elapsedTime) {",
            "miss": false
          },
          "308": {
            "source": "                                percent = Math.round(elapsedTime / prevRun.elapsedTime * 100);",
            "hits": 2,
            "miss": false
          },
          "309": {
            "source": "                                //console.log(percent);",
            "miss": false
          },
          "310": {
            "source": "                                //}",
            "miss": false
          },
          "311": {
            "source": "                            }",
            "miss": false
          },
          "312": {
            "source": "                            runConfig.elapsedTime = Math.round(elapsedTime / 1000);",
            "hits": 4,
            "miss": false
          },
          "313": {
            "source": "                            runConfig.percent = percent;",
            "hits": 4,
            "miss": false
          },
          "314": {
            "source": "                            var command = internals.getActiveCommand(runs[0].commands);",
            "hits": 4,
            "miss": false
          },
          "315": {
            "source": "                            runConfig.processes = [];",
            "hits": 4,
            "miss": false
          },
          "316": {
            "source": "                            for (var j = 0; j < pids.length; j++) {",
            "hits": 4,
            "miss": false
          },
          "317": {
            "source": "                                var process = {",
            "hits": 4,
            "miss": false
          },
          "318": {
            "source": "                                    jobId: jobId,",
            "miss": false
          },
          "319": {
            "source": "                                    runId: runs[0].id,",
            "miss": false
          },
          "320": {
            "source": "                                    pid: pids[j],",
            "miss": false
          },
          "321": {
            "source": "                                    command: command",
            "miss": false
          },
          "322": {
            "source": "                                };",
            "miss": false
          },
          "323": {
            "source": "                                runConfig.processes.push(process);",
            "hits": 4,
            "miss": false
          },
          "324": {
            "source": "                            }",
            "miss": false
          },
          "325": {
            "source": "                            //console.log(run.commands);",
            "miss": false
          },
          "326": {
            "source": "                            activeRuns.push(runConfig);",
            "hits": 4,
            "miss": false
          },
          "327": {
            "source": "                            // remove the finished Runs first one as it was really active",
            "miss": false
          },
          "328": {
            "source": "                            finishedRuns.splice(0, 1);",
            "hits": 4,
            "miss": false
          },
          "329": {
            "source": "                        }",
            "miss": false
          },
          "330": {
            "source": "                        config.activeRuns = activeRuns;",
            "hits": 6,
            "miss": false
          },
          "331": {
            "source": "                        config.finishedRuns = finishedRuns;",
            "hits": 6,
            "miss": false
          },
          "332": {
            "source": "                        Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/run/' + lastRunId + '/test/lab.json', { json: 'force' }, function (err, resp, pl) {",
            "hits": 6,
            "miss": false
          },
          "333": {
            "source": "",
            "miss": false
          },
          "334": {
            "source": "                            // returns a status code when invalid lastRunId",
            "miss": false
          },
          "335": {
            "source": "                            //console.log(pl);",
            "miss": false
          },
          "336": {
            "source": "                            if (pl !== null && !pl.statusCode) {",
            "hits": 6,
            "miss": false
          },
          "337": {
            "source": "                                config.testResult = pl;",
            "hits": 1,
            "miss": false
          },
          "338": {
            "source": "                            }",
            "miss": false
          },
          "339": {
            "source": "                            config.scmPrs = 0;",
            "hits": 6,
            "miss": false
          },
          "340": {
            "source": "                            Hoek.merge(config, commonConfig);",
            "hits": 6,
            "miss": false
          },
          "341": {
            "source": "                            if (job.scm) {",
            "chunks": [
              {
                "source": "                            if ("
              },
              {
                "source": "job.scm",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "342": {
            "source": "                                config.scmType = job.scm.type;",
            "hits": 6,
            "miss": false
          },
          "343": {
            "source": "                                config.scmUrl = job.scm.url;",
            "hits": 6,
            "miss": false
          },
          "344": {
            "source": "                                config.scmBranch = job.scm.branch;",
            "hits": 6,
            "miss": false
          },
          "345": {
            "source": "                                if (job.scm.runOnCommit) {",
            "hits": 6,
            "miss": false
          },
          "346": {
            "source": "                                    config.scmRunOnCommit = 1;",
            "hits": 1,
            "miss": false
          },
          "347": {
            "source": "                                }",
            "miss": false
          },
          "348": {
            "source": "                                if (job.scm.prs) {",
            "hits": 6,
            "miss": false
          },
          "349": {
            "source": "                                    config.scmPrs = 1;",
            "hits": 5,
            "miss": false
          },
          "350": {
            "source": "                                    internals.getPullRequestsConfig(jobId, token, runs[0], config, function (finalConfig) {",
            "hits": 5,
            "miss": false
          },
          "351": {
            "source": "",
            "miss": false
          },
          "352": {
            "source": "                                        return cb(finalConfig);",
            "hits": 5,
            "miss": false
          },
          "353": {
            "source": "                                    });",
            "miss": false
          },
          "354": {
            "source": "                                } else {",
            "miss": false
          },
          "355": {
            "source": "                                    return cb(config);",
            "hits": 1,
            "miss": false
          },
          "356": {
            "source": "                                }",
            "miss": false
          },
          "357": {
            "source": "                            } else {",
            "miss": false
          },
          "358": {
            "source": "                                return cb(config);",
            "hits": 0,
            "miss": true
          },
          "359": {
            "source": "                            }",
            "miss": false
          },
          "360": {
            "source": "                        });",
            "miss": false
          },
          "361": {
            "source": "                    });",
            "miss": false
          },
          "362": {
            "source": "                });",
            "miss": false
          },
          "363": {
            "source": "            });",
            "miss": false
          },
          "364": {
            "source": "        });",
            "miss": false
          },
          "365": {
            "source": "    });",
            "miss": false
          },
          "366": {
            "source": "};",
            "miss": false
          },
          "367": {
            "source": "",
            "miss": false
          },
          "368": {
            "source": "exports.updateJob = function (jobId, payload, cb) {",
            "hits": 1,
            "miss": false
          },
          "369": {
            "source": "",
            "miss": false
          },
          "370": {
            "source": "    var headCommands = [];",
            "hits": 1,
            "miss": false
          },
          "371": {
            "source": "    var bodyCommands = [];",
            "hits": 1,
            "miss": false
          },
          "372": {
            "source": "    var tailCommands = [];",
            "hits": 1,
            "miss": false
          },
          "373": {
            "source": "    for (var key in payload) {",
            "hits": 1,
            "miss": false
          },
          "374": {
            "source": "       //console.log(key + ':' + payload[key]);",
            "miss": false
          },
          "375": {
            "source": "        if (key.match('headCommand')) {",
            "hits": 4,
            "miss": false
          },
          "376": {
            "source": "            if (payload[key] !== '') {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "payload[key] !== ''",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "377": {
            "source": "                headCommands.push(payload[key]);",
            "hits": 1,
            "miss": false
          },
          "378": {
            "source": "            }",
            "miss": false
          },
          "379": {
            "source": "            delete payload[key];",
            "hits": 1,
            "miss": false
          },
          "380": {
            "source": "        }",
            "miss": false
          },
          "381": {
            "source": "        if (key.match('bodyCommand')) {",
            "hits": 4,
            "miss": false
          },
          "382": {
            "source": "            if (payload[key] !== '') {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "payload[key] !== ''",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "383": {
            "source": "                bodyCommands.push(payload[key]);",
            "hits": 1,
            "miss": false
          },
          "384": {
            "source": "            }",
            "miss": false
          },
          "385": {
            "source": "            delete payload[key];",
            "hits": 1,
            "miss": false
          },
          "386": {
            "source": "        }",
            "miss": false
          },
          "387": {
            "source": "        if (key.match('tailCommand')) {",
            "hits": 4,
            "miss": false
          },
          "388": {
            "source": "            if (payload[key] !== '') {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "payload[key] !== ''",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "389": {
            "source": "                tailCommands.push(payload[key]);",
            "hits": 1,
            "miss": false
          },
          "390": {
            "source": "            }",
            "miss": false
          },
          "391": {
            "source": "            delete payload[key];",
            "hits": 1,
            "miss": false
          },
          "392": {
            "source": "        }",
            "miss": false
          },
          "393": {
            "source": "    }",
            "miss": false
          },
          "394": {
            "source": "    var config = {",
            "hits": 1,
            "miss": false
          },
          "395": {
            "source": "        name: payload.name,",
            "miss": false
          },
          "396": {
            "source": "        description: payload.description",
            "miss": false
          },
          "397": {
            "source": "    };",
            "miss": false
          },
          "398": {
            "source": "    if (payload.scmType === 'git') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "payload.scmType === 'git'",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "399": {
            "source": "        config.scm = {",
            "hits": 0,
            "miss": true
          },
          "400": {
            "source": "            type: payload.scmType,",
            "miss": false
          },
          "401": {
            "source": "            url: payload.scmUrl,",
            "miss": false
          },
          "402": {
            "source": "            branch: payload.scmBranch",
            "miss": false
          },
          "403": {
            "source": "        };",
            "miss": false
          },
          "404": {
            "source": "        if (payload.scmPrs) {",
            "hits": 0,
            "miss": true
          },
          "405": {
            "source": "            config.scm.prs = true;",
            "hits": 0,
            "miss": true
          },
          "406": {
            "source": "        } else {",
            "miss": false
          },
          "407": {
            "source": "            config.scm.prs = false;",
            "hits": 0,
            "miss": true
          },
          "408": {
            "source": "        }",
            "miss": false
          },
          "409": {
            "source": "        if (payload.scmRunOnCommit) {",
            "hits": 0,
            "miss": true
          },
          "410": {
            "source": "            config.scm.runOnCommit = true;",
            "hits": 0,
            "miss": true
          },
          "411": {
            "source": "        } else {",
            "miss": false
          },
          "412": {
            "source": "            config.scm.runOnCommit = false;",
            "hits": 0,
            "miss": true
          },
          "413": {
            "source": "        }",
            "miss": false
          },
          "414": {
            "source": "    }",
            "miss": false
          },
          "415": {
            "source": "    if (payload.cronPattern !== '') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "payload.cronPattern !== ''",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "416": {
            "source": "        config.schedule = {",
            "hits": 1,
            "miss": false
          },
          "417": {
            "source": "            type: payload.scheduleType,",
            "miss": false
          },
          "418": {
            "source": "            pattern: payload.cronPattern",
            "miss": false
          },
          "419": {
            "source": "        };",
            "miss": false
          },
          "420": {
            "source": "    } else {",
            "miss": false
          },
          "421": {
            "source": "        config.schedule = {",
            "hits": 0,
            "miss": true
          },
          "422": {
            "source": "            type: 'none',",
            "miss": false
          },
          "423": {
            "source": "            pattern: payload.cronPattern",
            "miss": false
          },
          "424": {
            "source": "        };",
            "miss": false
          },
          "425": {
            "source": "    }",
            "miss": false
          },
          "426": {
            "source": "    if (payload.archivePattern !== '') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "payload.archivePattern !== ''",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "427": {
            "source": "        config.archive = {",
            "hits": 1,
            "miss": false
          },
          "428": {
            "source": "            pattern: payload.archivePattern",
            "miss": false
          },
          "429": {
            "source": "        };",
            "miss": false
          },
          "430": {
            "source": "    }",
            "miss": false
          },
          "431": {
            "source": "    config.head = headCommands;",
            "hits": 1,
            "miss": false
          },
          "432": {
            "source": "    config.body = bodyCommands;",
            "hits": 1,
            "miss": false
          },
          "433": {
            "source": "    config.tail = tailCommands;",
            "hits": 1,
            "miss": false
          },
          "434": {
            "source": "    //console.log(jobId);",
            "miss": false
          },
          "435": {
            "source": "    Wreck.post(internals.Job.settings.api.url + '/job/' + jobId, { payload: JSON.stringify(config) }, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "436": {
            "source": "",
            "miss": false
          },
          "437": {
            "source": "        var updateConfig = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "438": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "439": {
            "source": "    });",
            "miss": false
          },
          "440": {
            "source": "};",
            "miss": false
          },
          "441": {
            "source": "",
            "miss": false
          },
          "442": {
            "source": "exports.deleteJob = function (jobId, cb) {",
            "hits": 1,
            "miss": false
          },
          "443": {
            "source": "",
            "miss": false
          },
          "444": {
            "source": "    Wreck.delete(internals.Job.settings.api.url + '/job/' + jobId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "445": {
            "source": "",
            "miss": false
          },
          "446": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "447": {
            "source": "    });",
            "miss": false
          },
          "448": {
            "source": "};",
            "miss": false
          },
          "449": {
            "source": "",
            "miss": false
          },
          "450": {
            "source": "exports.deleteWorkspace = function (jobId, cb) {",
            "hits": 1,
            "miss": false
          },
          "451": {
            "source": "",
            "miss": false
          },
          "452": {
            "source": "",
            "miss": false
          },
          "453": {
            "source": "    Wreck.delete(internals.Job.settings.api.url + '/job/' + jobId + '/workspace', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "454": {
            "source": "",
            "miss": false
          },
          "455": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "456": {
            "source": "    });",
            "miss": false
          },
          "457": {
            "source": "};",
            "miss": false
          },
          "458": {
            "source": "",
            "miss": false
          },
          "459": {
            "source": "internals.getActiveCommand = function (cmds) {",
            "hits": 1,
            "miss": false
          },
          "460": {
            "source": "",
            "miss": false
          },
          "461": {
            "source": "    // the last part of the array cant have a finishTime since you will end",
            "miss": false
          },
          "462": {
            "source": "    //console.log(cmds);",
            "miss": false
          },
          "463": {
            "source": "    var end = cmds.length - 1;",
            "hits": 4,
            "miss": false
          },
          "464": {
            "source": "    for (var i = 0; i < end; i++) {",
            "chunks": [
              {
                "source": "    for (var i = 0; "
              },
              {
                "source": "i < end",
                "miss": "true"
              },
              {
                "source": "; i++) {"
              }
            ],
            "hits": 4,
            "miss": true
          },
          "465": {
            "source": "        //console.log(cmds[i]);",
            "miss": false
          },
          "466": {
            "source": "        if (!cmds[i].finishTime) {",
            "hits": 4,
            "miss": false
          },
          "467": {
            "source": "            //console.log(cmds[i].command);",
            "miss": false
          },
          "468": {
            "source": "            return cmds[i].command;",
            "hits": 1,
            "miss": false
          },
          "469": {
            "source": "        }",
            "miss": false
          },
          "470": {
            "source": "        if (i === end - 1 && cmds[i].finishTime) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "i === end - 1",
                "miss": "true"
              },
              {
                "source": " && cmds[i].finishTime) {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "471": {
            "source": "            return cmds[end].command;",
            "hits": 3,
            "miss": false
          },
          "472": {
            "source": "        }",
            "miss": false
          },
          "473": {
            "source": "    }",
            "miss": false
          },
          "474": {
            "source": "};",
            "miss": false
          },
          "475": {
            "source": "",
            "miss": false
          },
          "476": {
            "source": "exports.getCommitsConfig = function (jobId, cb) {",
            "hits": 1,
            "miss": false
          },
          "477": {
            "source": "",
            "miss": false
          },
          "478": {
            "source": "    internals.Job.getCommonConfig(function (commonConfig) {",
            "hits": 1,
            "miss": false
          },
          "479": {
            "source": "",
            "miss": false
          },
          "480": {
            "source": "        Wreck.get(internals.Job.settings.api.url + '/job/' + jobId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "481": {
            "source": "",
            "miss": false
          },
          "482": {
            "source": "            var job = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "483": {
            "source": "            Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/commits', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "484": {
            "source": "",
            "miss": false
          },
          "485": {
            "source": "                //console.log(pl);",
            "miss": false
          },
          "486": {
            "source": "                var commits = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "487": {
            "source": "                // add repoUrl",
            "miss": false
          },
          "488": {
            "source": "                for (var i = 0; i < commits.length; i++) {",
            "hits": 1,
            "miss": false
          },
          "489": {
            "source": "                    commits[i].repoUrl = job.scm.url;",
            "hits": 2,
            "miss": false
          },
          "490": {
            "source": "                }",
            "miss": false
          },
          "491": {
            "source": "                var config = {",
            "hits": 1,
            "miss": false
          },
          "492": {
            "source": "                    viewCommits: true,",
            "miss": false
          },
          "493": {
            "source": "                    jobId: jobId,",
            "miss": false
          },
          "494": {
            "source": "                    jobName: job.name,",
            "miss": false
          },
          "495": {
            "source": "                    commits: commits",
            "miss": false
          },
          "496": {
            "source": "                };",
            "miss": false
          },
          "497": {
            "source": "                Hoek.merge(config, commonConfig);",
            "hits": 1,
            "miss": false
          },
          "498": {
            "source": "                return cb(config);",
            "hits": 1,
            "miss": false
          },
          "499": {
            "source": "            });",
            "miss": false
          },
          "500": {
            "source": "        });",
            "miss": false
          },
          "501": {
            "source": "    });",
            "miss": false
          },
          "502": {
            "source": "};",
            "miss": false
          },
          "503": {
            "source": "",
            "miss": false
          },
          "504": {
            "source": "exports.mergePullRequest = function (jobId, number, token, cb) {",
            "hits": 1,
            "miss": false
          },
          "505": {
            "source": "",
            "miss": false
          },
          "506": {
            "source": "    //console.log('attempting to merge pull request: ' + number + ' with token: ' + token);",
            "miss": false
          },
          "507": {
            "source": "    var options = {",
            "hits": 0,
            "miss": true
          },
          "508": {
            "source": "        headers: {",
            "miss": false
          },
          "509": {
            "source": "            githubToken: token",
            "miss": false
          },
          "510": {
            "source": "        }",
            "miss": false
          },
          "511": {
            "source": "    };",
            "miss": false
          },
          "512": {
            "source": "    Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/pr/' + number + '/merge', options, function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "513": {
            "source": "",
            "miss": false
          },
          "514": {
            "source": "        var result = pl;",
            "hits": 0,
            "miss": true
          },
          "515": {
            "source": "        return cb(result);",
            "hits": 0,
            "miss": true
          },
          "516": {
            "source": "    });",
            "miss": false
          },
          "517": {
            "source": "};",
            "miss": false
          },
          "518": {
            "source": "",
            "miss": false
          },
          "519": {
            "source": "exports.retryPullRequest = function (jobId, number, cb) {",
            "hits": 1,
            "miss": false
          },
          "520": {
            "source": "",
            "miss": false
          },
          "521": {
            "source": "    console.log('retrying pull request: ' + number);",
            "hits": 0,
            "miss": true
          },
          "522": {
            "source": "    Wreck.delete(internals.Job.settings.api.url + '/job/' + jobId + '/pr/' + number, function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "523": {
            "source": "",
            "miss": false
          },
          "524": {
            "source": "        return cb();",
            "hits": 0,
            "miss": true
          },
          "525": {
            "source": "    });",
            "miss": false
          },
          "526": {
            "source": "};",
            "miss": false
          },
          "527": {
            "source": "",
            "miss": false
          },
          "528": {
            "source": "internals.getPullRequestsConfig = function (jobId, token, lastRun, config, cb2) {",
            "hits": 1,
            "miss": false
          },
          "529": {
            "source": "",
            "miss": false
          },
          "530": {
            "source": "//    return cb(config);",
            "miss": false
          },
          "531": {
            "source": "    Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/prs', function (err, resp, pl) {",
            "hits": 5,
            "miss": false
          },
          "532": {
            "source": "",
            "miss": false
          },
          "533": {
            "source": "        var prs = [];",
            "hits": 5,
            "miss": false
          },
          "534": {
            "source": "        if (pl) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "pl",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 5,
            "miss": true
          },
          "535": {
            "source": "            prs = JSON.parse(pl);",
            "hits": 5,
            "miss": false
          },
          "536": {
            "source": "        }",
            "miss": false
          },
          "537": {
            "source": "        config.newPullRequests = [];",
            "hits": 5,
            "miss": false
          },
          "538": {
            "source": "        config.activePullRequests = [];",
            "hits": 5,
            "miss": false
          },
          "539": {
            "source": "        config.checkedPullRequests = [];",
            "hits": 5,
            "miss": false
          },
          "540": {
            "source": "        var getLastName = function getLastRun (i) {",
            "hits": 5,
            "miss": false
          },
          "541": {
            "source": "",
            "miss": false
          },
          "542": {
            "source": "            if (i < prs.length) {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "i < prs.length",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 5,
            "miss": true
          },
          "543": {
            "source": "                prs[i].jobId = jobId;",
            "hits": 0,
            "miss": true
          },
          "544": {
            "source": "                // initialize 3 states of the pull request",
            "miss": false
          },
          "545": {
            "source": "                Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/pr/' + prs[i].number + '/runs', function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "546": {
            "source": "",
            "miss": false
          },
          "547": {
            "source": "                    var prRuns = JSON.parse(pl);",
            "hits": 0,
            "miss": true
          },
          "548": {
            "source": "                    if (prRuns.length === 0) {",
            "hits": 0,
            "miss": true
          },
          "549": {
            "source": "                        // its new",
            "miss": false
          },
          "550": {
            "source": "                        config.newPullRequests.push(prs[i]);",
            "hits": 0,
            "miss": true
          },
          "551": {
            "source": "                        if (internals.Job.settings.prs.autoStart) {",
            "hits": 0,
            "miss": true
          },
          "552": {
            "source": "                            console.log('starting pr check for: ' + prs[i].number);",
            "hits": 0,
            "miss": true
          },
          "553": {
            "source": "                            Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/pr/' + prs[i].number + '/start', function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "554": {
            "source": "",
            "miss": false
          },
          "555": {
            "source": "                                getLastRun(i + 1);",
            "hits": 0,
            "miss": true
          },
          "556": {
            "source": "                            });",
            "miss": false
          },
          "557": {
            "source": "                        } else {",
            "miss": false
          },
          "558": {
            "source": "                            getLastRun(i + 1);",
            "hits": 0,
            "miss": true
          },
          "559": {
            "source": "                        }",
            "miss": false
          },
          "560": {
            "source": "                    } else {",
            "miss": false
          },
          "561": {
            "source": "                        var runId = prRuns[0].id;",
            "hits": 0,
            "miss": true
          },
          "562": {
            "source": "                        Wreck.get(internals.Job.settings.api.url + '/job/' + jobId + '/pr/' + prs[i].number + '/run/' + runId + '/pids', function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "563": {
            "source": "",
            "miss": false
          },
          "564": {
            "source": "                            var pids = JSON.parse(pl);",
            "hits": 0,
            "miss": true
          },
          "565": {
            "source": "                            var percent = 0;",
            "hits": 0,
            "miss": true
          },
          "566": {
            "source": "                            var now = new Date().getTime();",
            "hits": 0,
            "miss": true
          },
          "567": {
            "source": "                            var elapsedTime = now - prRuns[0].startTime;",
            "hits": 0,
            "miss": true
          },
          "568": {
            "source": "                            lastRun = lastRun || {};",
            "hits": 0,
            "miss": true
          },
          "569": {
            "source": "                            // set a default of 1 sec",
            "miss": false
          },
          "570": {
            "source": "                            if (!lastRun.elapsedTime) {",
            "hits": 0,
            "miss": true
          },
          "571": {
            "source": "                                lastRun.elapsedTime = 1000;",
            "hits": 0,
            "miss": true
          },
          "572": {
            "source": "                            }",
            "miss": false
          },
          "573": {
            "source": "                            percent = Math.round(elapsedTime / lastRun.elapsedTime * 100);",
            "hits": 0,
            "miss": true
          },
          "574": {
            "source": "                            elapsedTime = Math.round(elapsedTime / 1000);",
            "hits": 0,
            "miss": true
          },
          "575": {
            "source": "                            var command = internals.getActiveCommand(prRuns[0].commands);",
            "hits": 0,
            "miss": true
          },
          "576": {
            "source": "                            if (pids.length > 0) {",
            "hits": 0,
            "miss": true
          },
          "577": {
            "source": "                                //we have an active run",
            "miss": false
          },
          "578": {
            "source": "                                var processes = [];",
            "hits": 0,
            "miss": true
          },
          "579": {
            "source": "                                for (var j = 0; j < pids.length; j++) {",
            "hits": 0,
            "miss": true
          },
          "580": {
            "source": "                                    var process = {",
            "hits": 0,
            "miss": true
          },
          "581": {
            "source": "                                        jobId: jobId,",
            "miss": false
          },
          "582": {
            "source": "                                        runId: runId,",
            "miss": false
          },
          "583": {
            "source": "                                        repoUrl: prs[i].repoUrl,",
            "miss": false
          },
          "584": {
            "source": "                                        pid: pids[j],",
            "miss": false
          },
          "585": {
            "source": "                                        number: prs[i].number,",
            "miss": false
          },
          "586": {
            "source": "                                        command: command",
            "miss": false
          },
          "587": {
            "source": "                                    };",
            "miss": false
          },
          "588": {
            "source": "                                    processes.push(process);",
            "hits": 0,
            "miss": true
          },
          "589": {
            "source": "                                }",
            "miss": false
          },
          "590": {
            "source": "                                config.activePullRequests.push({",
            "hits": 0,
            "miss": true
          },
          "591": {
            "source": "                                    jobId: jobId,",
            "miss": false
          },
          "592": {
            "source": "                                    runId: runId,",
            "miss": false
          },
          "593": {
            "source": "                                    shortId: runId.split('-')[0],",
            "miss": false
          },
          "594": {
            "source": "                                    number: prs[i].number,",
            "miss": false
          },
          "595": {
            "source": "                                    percent: percent,",
            "miss": false
          },
          "596": {
            "source": "                                    elapsedTime: elapsedTime,",
            "miss": false
          },
          "597": {
            "source": "                                    processes: processes",
            "miss": false
          },
          "598": {
            "source": "                                });",
            "miss": false
          },
          "599": {
            "source": "                            } else {",
            "miss": false
          },
          "600": {
            "source": "                                // we have a checked run",
            "miss": false
          },
          "601": {
            "source": "                                prs[i].runId = runId;",
            "hits": 0,
            "miss": true
          },
          "602": {
            "source": "                                prs[i].shortId = runId.split('-')[0];",
            "hits": 0,
            "miss": true
          },
          "603": {
            "source": "                                prs[i].finishTime = DateFormat(prRuns[0].finishTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 0,
            "miss": true
          },
          "604": {
            "source": "                                prs[i].elapsedTime = Math.round((prRuns[0].finishTime - prRuns[0].startTime) / 1000);",
            "hits": 0,
            "miss": true
          },
          "605": {
            "source": "                                if (prRuns[0].status === 'succeeded' ) {",
            "hits": 0,
            "miss": true
          },
          "606": {
            "source": "                                    prs[i].classColor = 'success';",
            "hits": 0,
            "miss": true
          },
          "607": {
            "source": "                                    prs[i].buttonColor = 'btn-success';",
            "hits": 0,
            "miss": true
          },
          "608": {
            "source": "                                }",
            "miss": false
          },
          "609": {
            "source": "                                if (prRuns[0].status === 'failed' || prRuns[0].status === 'cancelled') {",
            "hits": 0,
            "miss": true
          },
          "610": {
            "source": "                                    prs[i].classColor = 'danger';",
            "hits": 0,
            "miss": true
          },
          "611": {
            "source": "                                    prs[i].buttonColor = 'btn-danger';",
            "hits": 0,
            "miss": true
          },
          "612": {
            "source": "                                }",
            "miss": false
          },
          "613": {
            "source": "                                config.checkedPullRequests.push(prs[i]);",
            "hits": 0,
            "miss": true
          },
          "614": {
            "source": "                            }",
            "miss": false
          },
          "615": {
            "source": "                            getLastRun(i + 1);",
            "hits": 0,
            "miss": true
          },
          "616": {
            "source": "                        });",
            "miss": false
          },
          "617": {
            "source": "                    }",
            "miss": false
          },
          "618": {
            "source": "                });",
            "miss": false
          },
          "619": {
            "source": "            } else {",
            "miss": false
          },
          "620": {
            "source": "                config.prs = config.newPullRequests.length + config.activePullRequests.length + config.checkedPullRequests.length;",
            "hits": 5,
            "miss": false
          },
          "621": {
            "source": "                return cb2(config);",
            "hits": 5,
            "miss": false
          },
          "622": {
            "source": "            }",
            "miss": false
          },
          "623": {
            "source": "        };",
            "miss": false
          },
          "624": {
            "source": "        getLastName(0);",
            "hits": 5,
            "miss": false
          },
          "625": {
            "source": "    });",
            "miss": false
          },
          "626": {
            "source": "};",
            "miss": false
          },
          "627": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/utils/queue.js",
        "percent": 100,
        "hits": 43,
        "misses": 0,
        "sloc": 43,
        "source": {
          "1": {
            "source": "var internals = {",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "    queue: []",
            "miss": false
          },
          "3": {
            "source": "};",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "module.exports = internals.Queue = function (options) {",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "    this.settings = options;",
            "hits": 1350,
            "miss": false
          },
          "8": {
            "source": "    internals.Queue.settings = options;",
            "hits": 1350,
            "miss": false
          },
          "9": {
            "source": "    this.addJob = exports.addJob;",
            "hits": 1350,
            "miss": false
          },
          "10": {
            "source": "    this.removeJob = exports.removeJob;",
            "hits": 1350,
            "miss": false
          },
          "11": {
            "source": "    this.getQueue = exports.getQueue;",
            "hits": 1350,
            "miss": false
          },
          "12": {
            "source": "};",
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "exports.addJob = function (jobId) {",
            "hits": 1,
            "miss": false
          },
          "15": {
            "source": "",
            "miss": false
          },
          "16": {
            "source": "    var queueTime = new Date().getTime();",
            "hits": 4,
            "miss": false
          },
          "17": {
            "source": "    var queue = {",
            "hits": 4,
            "miss": false
          },
          "18": {
            "source": "        jobId: jobId,",
            "miss": false
          },
          "19": {
            "source": "        queueTime: queueTime",
            "miss": false
          },
          "20": {
            "source": "    };",
            "miss": false
          },
          "21": {
            "source": "    internals.queue.push(queue);",
            "hits": 4,
            "miss": false
          },
          "22": {
            "source": "    return null;",
            "hits": 4,
            "miss": false
          },
          "23": {
            "source": "};",
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "exports.removeJob = function (jobId) {",
            "hits": 1,
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          },
          "27": {
            "source": "    for (var i = 0; i < internals.queue.length; i++) {",
            "hits": 2,
            "miss": false
          },
          "28": {
            "source": "        if (internals.queue[i].jobId === jobId) {",
            "hits": 5,
            "miss": false
          },
          "29": {
            "source": "            internals.queue.splice(i, 1);",
            "hits": 3,
            "miss": false
          },
          "30": {
            "source": "        }",
            "miss": false
          },
          "31": {
            "source": "    }",
            "miss": false
          },
          "32": {
            "source": "    return null;",
            "hits": 2,
            "miss": false
          },
          "33": {
            "source": "};",
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "exports.getQueue = function () {",
            "hits": 1,
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "    var queue = [];",
            "hits": 20,
            "miss": false
          },
          "38": {
            "source": "    for (var i = 0; i < internals.queue.length; i++) {",
            "hits": 20,
            "miss": false
          },
          "39": {
            "source": "        var now = new Date().getTime();",
            "hits": 16,
            "miss": false
          },
          "40": {
            "source": "        var shortId = internals.queue[i].jobId.split('-')[0];",
            "hits": 16,
            "miss": false
          },
          "41": {
            "source": "        var elapsedTime = now - internals.queue[i].queueTime;",
            "hits": 16,
            "miss": false
          },
          "42": {
            "source": "        var job = {",
            "hits": 16,
            "miss": false
          },
          "43": {
            "source": "            jobId: internals.queue[i].jobId,",
            "miss": false
          },
          "44": {
            "source": "            queueTime: internals.queue[i].queueTime,",
            "miss": false
          },
          "45": {
            "source": "            shortId: shortId,",
            "miss": false
          },
          "46": {
            "source": "            elapsedTime: elapsedTime",
            "miss": false
          },
          "47": {
            "source": "        };",
            "miss": false
          },
          "48": {
            "source": "        queue.push(job);",
            "hits": 16,
            "miss": false
          },
          "49": {
            "source": "    }",
            "miss": false
          },
          "50": {
            "source": "    return queue;",
            "hits": 20,
            "miss": false
          },
          "51": {
            "source": "};",
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/utils/reel.js",
        "percent": 100,
        "hits": 79,
        "misses": 0,
        "sloc": 79,
        "source": {
          "1": {
            "source": "var Wreck = require('wreck');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "module.exports = internals.Reel = function (options) {",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "    this.settings = options;",
            "hits": 270,
            "miss": false
          },
          "8": {
            "source": "    internals.Reel.settings = options;",
            "hits": 270,
            "miss": false
          },
          "9": {
            "source": "    this.createReel = exports.createReel;",
            "hits": 270,
            "miss": false
          },
          "10": {
            "source": "    this.updateReel = exports.updateReel;",
            "hits": 270,
            "miss": false
          },
          "11": {
            "source": "    this.deleteReel = exports.deleteReel;",
            "hits": 270,
            "miss": false
          },
          "12": {
            "source": "    this.getReelConfig = exports.getReelConfig;",
            "hits": 270,
            "miss": false
          },
          "13": {
            "source": "    this.getReelCreateConfig = exports.getReelCreateConfig;",
            "hits": 270,
            "miss": false
          },
          "14": {
            "source": "};",
            "miss": false
          },
          "15": {
            "source": "",
            "miss": false
          },
          "16": {
            "source": "exports.getReelCreateConfig = function (cb) {",
            "hits": 1,
            "miss": false
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "    var reel = {};",
            "hits": 1,
            "miss": false
          },
          "19": {
            "source": "    var config = {};",
            "hits": 1,
            "miss": false
          },
          "20": {
            "source": "    Wreck.get(internals.Reel.settings.api.url + '/reels', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "        var reels = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "23": {
            "source": "        config.postUrl = internals.Reel.settings.viewPath + '/reel';",
            "hits": 1,
            "miss": false
          },
          "24": {
            "source": "        config.viewReel = true;",
            "hits": 1,
            "miss": false
          },
          "25": {
            "source": "        config.angler = 'lloyd';",
            "hits": 1,
            "miss": false
          },
          "26": {
            "source": "        config.reels = reels;",
            "hits": 1,
            "miss": false
          },
          "27": {
            "source": "        return cb(config);",
            "hits": 1,
            "miss": false
          },
          "28": {
            "source": "    });",
            "miss": false
          },
          "29": {
            "source": "};",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "exports.getReelConfig = function (reelId, cb) {",
            "hits": 1,
            "miss": false
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "    Wreck.get(internals.Reel.settings.api.url + '/reel/' + reelId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "        var reel = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "36": {
            "source": "        var config = {};",
            "hits": 1,
            "miss": false
          },
          "37": {
            "source": "        Wreck.get(internals.Reel.settings.api.url + '/reels', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "            var reels = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "40": {
            "source": "            config = {",
            "hits": 1,
            "miss": false
          },
          "41": {
            "source": "                postUrl: internals.Reel.settings.viewPath + '/reel/' + reel.id,",
            "miss": false
          },
          "42": {
            "source": "                id: reel.id,",
            "miss": false
          },
          "43": {
            "source": "                name: reel.name,",
            "miss": false
          },
          "44": {
            "source": "                description: reel.description,",
            "miss": false
          },
          "45": {
            "source": "                host: reel.host,",
            "miss": false
          },
          "46": {
            "source": "                directory: reel.directory,",
            "miss": false
          },
          "47": {
            "source": "                port: reel.port,",
            "miss": false
          },
          "48": {
            "source": "                size: reel.size",
            "miss": false
          },
          "49": {
            "source": "            };",
            "miss": false
          },
          "50": {
            "source": "            config.viewReel = true;",
            "hits": 1,
            "miss": false
          },
          "51": {
            "source": "            config.angler = 'lloyd';",
            "hits": 1,
            "miss": false
          },
          "52": {
            "source": "            config.reels = reels;",
            "hits": 1,
            "miss": false
          },
          "53": {
            "source": "            return cb(config);",
            "hits": 1,
            "miss": false
          },
          "54": {
            "source": "        });",
            "miss": false
          },
          "55": {
            "source": "    });",
            "miss": false
          },
          "56": {
            "source": "};",
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "exports.createReel = function (payload, cb) {",
            "hits": 1,
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "    var config = {",
            "hits": 1,
            "miss": false
          },
          "61": {
            "source": "        name: payload.name,",
            "miss": false
          },
          "62": {
            "source": "        host: payload.host,",
            "miss": false
          },
          "63": {
            "source": "        size: parseInt(payload.size),",
            "miss": false
          },
          "64": {
            "source": "        description: payload.description,",
            "miss": false
          },
          "65": {
            "source": "        directory: payload.directory,",
            "miss": false
          },
          "66": {
            "source": "        port: parseInt(payload.port)",
            "miss": false
          },
          "67": {
            "source": "    };",
            "miss": false
          },
          "68": {
            "source": "    Wreck.post(internals.Reel.settings.api.url + '/reel', { headers: { 'Content-Type': 'application/json' }, payload: JSON.stringify(config) }, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "69": {
            "source": "",
            "miss": false
          },
          "70": {
            "source": "        var createConfig = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "71": {
            "source": "        return cb(createConfig);",
            "hits": 1,
            "miss": false
          },
          "72": {
            "source": "    });",
            "miss": false
          },
          "73": {
            "source": "};",
            "miss": false
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "exports.deleteReel = function (reelId, cb) {",
            "hits": 1,
            "miss": false
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "    Wreck.delete(internals.Reel.settings.api.url + '/reel/' + reelId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "78": {
            "source": "",
            "miss": false
          },
          "79": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "80": {
            "source": "    });",
            "miss": false
          },
          "81": {
            "source": "};",
            "miss": false
          },
          "82": {
            "source": "",
            "miss": false
          },
          "83": {
            "source": "exports.updateReel = function (reelId, payload, cb) {",
            "hits": 1,
            "miss": false
          },
          "84": {
            "source": "",
            "miss": false
          },
          "85": {
            "source": "    var config = {",
            "hits": 1,
            "miss": false
          },
          "86": {
            "source": "        name: payload.name,",
            "miss": false
          },
          "87": {
            "source": "        host: payload.host,",
            "miss": false
          },
          "88": {
            "source": "        size: parseInt(payload.size),",
            "miss": false
          },
          "89": {
            "source": "        description: payload.description,",
            "miss": false
          },
          "90": {
            "source": "        directory: payload.directory,",
            "miss": false
          },
          "91": {
            "source": "        port: parseInt(payload.port)",
            "miss": false
          },
          "92": {
            "source": "    };",
            "miss": false
          },
          "93": {
            "source": "    Wreck.post(internals.Reel.settings.api.url + '/reel/' + reelId, { headers: { 'Content-Type': 'application/json' }, payload: JSON.stringify(config) }, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "94": {
            "source": "",
            "miss": false
          },
          "95": {
            "source": "        var updateConfig = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "96": {
            "source": "        return cb(updateConfig);",
            "hits": 1,
            "miss": false
          },
          "97": {
            "source": "    });",
            "miss": false
          },
          "98": {
            "source": "};",
            "miss": false
          },
          "99": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/utils/run.js",
        "percent": 83.78378378378379,
        "hits": 186,
        "misses": 36,
        "sloc": 222,
        "source": {
          "1": {
            "source": "var DateFormat = require('dateformat');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "var Wreck = require('wreck');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Common = require('./common');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "module.exports = internals.Run = function (options) {",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "    internals.Run.settings = options;",
            "hits": 270,
            "miss": false
          },
          "11": {
            "source": "    var common = new Common(options);",
            "hits": 270,
            "miss": false
          },
          "12": {
            "source": "    internals.Run.getCommonConfig = common.getCommonConfig;",
            "hits": 270,
            "miss": false
          },
          "13": {
            "source": "    this.getRunConfig = exports.getRunConfig;",
            "hits": 270,
            "miss": false
          },
          "14": {
            "source": "    this.getPullRequestRunConfig = exports.getPullRequestRunConfig;",
            "hits": 270,
            "miss": false
          },
          "15": {
            "source": "    this.getFileConfig = exports.getFileConfig;",
            "hits": 270,
            "miss": false
          },
          "16": {
            "source": "    this.getTestConfig = exports.getTestConfig;",
            "hits": 270,
            "miss": false
          },
          "17": {
            "source": "    this.getCoverageConfig = exports.getCoverageConfig;",
            "hits": 270,
            "miss": false
          },
          "18": {
            "source": "    this.deleteRun = exports.deleteRun;",
            "hits": 270,
            "miss": false
          },
          "19": {
            "source": "    this.cancelRun = exports.cancelRun;",
            "hits": 270,
            "miss": false
          },
          "20": {
            "source": "    this.cancelPullRequest = exports.cancelPullRequest;",
            "hits": 270,
            "miss": false
          },
          "21": {
            "source": "};",
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "exports.getRunConfig = function (jobId, runId, cb) {",
            "hits": 1,
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "    var config = {",
            "hits": 2,
            "miss": false
          },
          "26": {
            "source": "        viewRun: true,",
            "miss": false
          },
          "27": {
            "source": "        jobId: jobId",
            "miss": false
          },
          "28": {
            "source": "    };",
            "miss": false
          },
          "29": {
            "source": "    internals.Run.getCommonConfig(function (commonConfig) {",
            "hits": 2,
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "        //console.log(commonConfig);",
            "miss": false
          },
          "32": {
            "source": "        Wreck.get(internals.Run.settings.api.url + '/job/' + jobId, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "            var job = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "35": {
            "source": "            config.name = job.name;",
            "hits": 2,
            "miss": false
          },
          "36": {
            "source": "            Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "37": {
            "source": "",
            "miss": false
          },
          "38": {
            "source": "                var run = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "39": {
            "source": "                config.runId = run.id;",
            "hits": 2,
            "miss": false
          },
          "40": {
            "source": "                config.status = run.status;",
            "hits": 2,
            "miss": false
          },
          "41": {
            "source": "                config.commit = run.commit;",
            "hits": 2,
            "miss": false
          },
          "42": {
            "source": "                config.checkout = run.checkout;",
            "hits": 2,
            "miss": false
          },
          "43": {
            "source": "                config.shortRunId = run.id.split('-')[0];",
            "hits": 2,
            "miss": false
          },
          "44": {
            "source": "                Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/runs', function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "                    var runs = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "47": {
            "source": "                    // set default as itself with override later",
            "miss": false
          },
          "48": {
            "source": "                    var comparePayload = {",
            "hits": 2,
            "miss": false
          },
          "49": {
            "source": "                        commit1: config.commit,",
            "miss": false
          },
          "50": {
            "source": "                        commit2: config.commit",
            "miss": false
          },
          "51": {
            "source": "                    };",
            "miss": false
          },
          "52": {
            "source": "                    for (var i = 0; i < runs.length; i++) {",
            "hits": 2,
            "miss": false
          },
          "53": {
            "source": "                        // figure out which runIndex it is",
            "miss": false
          },
          "54": {
            "source": "                        if (runs[i].id === runId) {",
            "hits": 6,
            "miss": false
          },
          "55": {
            "source": "                            // get the prev run if its not the first one",
            "miss": false
          },
          "56": {
            "source": "                            if (i !== runs.length - 1) {",
            "hits": 2,
            "miss": false
          },
          "57": {
            "source": "                                comparePayload.commit2 = runs[i + 1].commit;",
            "hits": 1,
            "miss": false
          },
          "58": {
            "source": "                            }",
            "miss": false
          },
          "59": {
            "source": "                        }",
            "miss": false
          },
          "60": {
            "source": "                    }",
            "miss": false
          },
          "61": {
            "source": "                    Wreck.post(internals.Run.settings.api.url + '/job/' + jobId + '/commits/compare', { payload: JSON.stringify(comparePayload) }, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "                        config.compareCommits = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "64": {
            "source": "                        Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + run.id + '/test/lab.json', function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "                            if (pl) {",
            "chunks": [
              {
                "source": "                            if ("
              },
              {
                "source": "pl",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 2,
            "miss": true
          },
          "67": {
            "source": "                                config.testResult = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "68": {
            "source": "                            }",
            "miss": false
          },
          "69": {
            "source": "                            Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId + '/archive', function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "70": {
            "source": "",
            "miss": false
          },
          "71": {
            "source": "                                var files = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "72": {
            "source": "                                config.archiveFiles = [];",
            "hits": 2,
            "miss": false
          },
          "73": {
            "source": "                                for (var i = 0; i < files.length; i++) {",
            "hits": 2,
            "miss": false
          },
          "74": {
            "source": "                                    var fileConfig = {",
            "hits": 1,
            "miss": false
          },
          "75": {
            "source": "                                        jobId: jobId,",
            "miss": false
          },
          "76": {
            "source": "                                        runId: runId,",
            "miss": false
          },
          "77": {
            "source": "                                        file: files[i]",
            "miss": false
          },
          "78": {
            "source": "                                    };",
            "miss": false
          },
          "79": {
            "source": "                                    config.archiveFiles.push(fileConfig);",
            "hits": 1,
            "miss": false
          },
          "80": {
            "source": "                                }",
            "miss": false
          },
          "81": {
            "source": "                                config.commands = [];",
            "hits": 2,
            "miss": false
          },
          "82": {
            "source": "                                for (var j = 0; j < run.commands.length; j++) {",
            "hits": 2,
            "miss": false
          },
          "83": {
            "source": "                                    //console.log(run.commands[j]);",
            "miss": false
          },
          "84": {
            "source": "                                    var startTime = run.commands[j].startTime;",
            "hits": 6,
            "miss": false
          },
          "85": {
            "source": "                                    if (run.commands[j].startTime) {",
            "chunks": [
              {
                "source": "                                    if ("
              },
              {
                "source": "run.commands[j].startTime",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "86": {
            "source": "                                        run.commands[j].startTime = DateFormat(startTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 6,
            "miss": false
          },
          "87": {
            "source": "                                    }",
            "miss": false
          },
          "88": {
            "source": "                                    if (run.commands[j].finishTime) {",
            "chunks": [
              {
                "source": "                                    if ("
              },
              {
                "source": "run.commands[j].finishTime",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "89": {
            "source": "                                        run.commands[j].elapsedTime = run.commands[i].finishTime - startTime;",
            "hits": 6,
            "miss": false
          },
          "90": {
            "source": "                                        run.commands[j].finishTime = DateFormat(run.commands[i].finishTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 6,
            "miss": false
          },
          "91": {
            "source": "                                    }",
            "miss": false
          },
          "92": {
            "source": "                                    config.commands.push(run.commands[j]);",
            "hits": 6,
            "miss": false
          },
          "93": {
            "source": "                                }",
            "miss": false
          },
          "94": {
            "source": "                                config.startTime = DateFormat(run.startTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 2,
            "miss": false
          },
          "95": {
            "source": "                                if (run.finishTime) {",
            "chunks": [
              {
                "source": "                                if ("
              },
              {
                "source": "run.finishTime",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 2,
            "miss": true
          },
          "96": {
            "source": "                                    config.finishTime = DateFormat(run.finishTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 2,
            "miss": false
          },
          "97": {
            "source": "                                    config.elapsedTime = run.finishTime - run.startTime;",
            "hits": 2,
            "miss": false
          },
          "98": {
            "source": "                                }",
            "miss": false
          },
          "99": {
            "source": "                                Hoek.merge(config, commonConfig);",
            "hits": 2,
            "miss": false
          },
          "100": {
            "source": "                                return cb(config);",
            "hits": 2,
            "miss": false
          },
          "101": {
            "source": "                            });",
            "miss": false
          },
          "102": {
            "source": "                        });",
            "miss": false
          },
          "103": {
            "source": "                    });",
            "miss": false
          },
          "104": {
            "source": "                });",
            "miss": false
          },
          "105": {
            "source": "            });",
            "miss": false
          },
          "106": {
            "source": "        });",
            "miss": false
          },
          "107": {
            "source": "    });",
            "miss": false
          },
          "108": {
            "source": "};",
            "miss": false
          },
          "109": {
            "source": "",
            "miss": false
          },
          "110": {
            "source": "exports.getPullRequestRunConfig = function (jobId, number, token, runId, cb) {",
            "hits": 1,
            "miss": false
          },
          "111": {
            "source": "",
            "miss": false
          },
          "112": {
            "source": "    var config = {",
            "hits": 0,
            "miss": true
          },
          "113": {
            "source": "        viewRun: true,",
            "miss": false
          },
          "114": {
            "source": "        jobId: jobId,",
            "miss": false
          },
          "115": {
            "source": "        number: number,",
            "miss": false
          },
          "116": {
            "source": "        runId: runId",
            "miss": false
          },
          "117": {
            "source": "    };",
            "miss": false
          },
          "118": {
            "source": "    internals.Run.getCommonConfig(function (commonConfig) {",
            "hits": 0,
            "miss": true
          },
          "119": {
            "source": "",
            "miss": false
          },
          "120": {
            "source": "        Wreck.get(internals.Run.settings.api.url + '/job/' + jobId, function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "121": {
            "source": "",
            "miss": false
          },
          "122": {
            "source": "            var job = JSON.parse(pl);",
            "hits": 0,
            "miss": true
          },
          "123": {
            "source": "            config.name = job.name;",
            "hits": 0,
            "miss": true
          },
          "124": {
            "source": "            Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/pr/' + number, function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "125": {
            "source": "",
            "miss": false
          },
          "126": {
            "source": "                var pr = JSON.parse(pl);",
            "hits": 0,
            "miss": true
          },
          "127": {
            "source": "                Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/pr/' + number + '/run/' + runId, function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "128": {
            "source": "",
            "miss": false
          },
          "129": {
            "source": "                    var run = JSON.parse(pl);",
            "hits": 0,
            "miss": true
          },
          "130": {
            "source": "                    config.status = run.status;",
            "hits": 0,
            "miss": true
          },
          "131": {
            "source": "                    config.commit = run.commit;",
            "hits": 0,
            "miss": true
          },
          "132": {
            "source": "                    config.checkout = run.checkout;",
            "hits": 0,
            "miss": true
          },
          "133": {
            "source": "                    config.commands = [];",
            "hits": 0,
            "miss": true
          },
          "134": {
            "source": "                    for (var i = 0; i < run.commands.length; i++) {",
            "hits": 0,
            "miss": true
          },
          "135": {
            "source": "                        //console.log(run.commands[i]);",
            "miss": false
          },
          "136": {
            "source": "                        var startTime = run.commands[i].startTime;",
            "hits": 0,
            "miss": true
          },
          "137": {
            "source": "                        if (run.commands[i].startTime) {",
            "hits": 0,
            "miss": true
          },
          "138": {
            "source": "                            run.commands[i].startTime = DateFormat(startTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 0,
            "miss": true
          },
          "139": {
            "source": "                        }",
            "miss": false
          },
          "140": {
            "source": "                        if (run.commands[i].finishTime) {",
            "hits": 0,
            "miss": true
          },
          "141": {
            "source": "                            run.commands[i].elapsedTime = run.commands[i].finishTime - startTime;",
            "hits": 0,
            "miss": true
          },
          "142": {
            "source": "                            run.commands[i].finishTime = DateFormat(run.commands[i].finishTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 0,
            "miss": true
          },
          "143": {
            "source": "                        }",
            "miss": false
          },
          "144": {
            "source": "                        config.commands.push(run.commands[i]);",
            "hits": 0,
            "miss": true
          },
          "145": {
            "source": "                    }",
            "miss": false
          },
          "146": {
            "source": "                    config.shortRunId = runId.split('-')[0];",
            "hits": 0,
            "miss": true
          },
          "147": {
            "source": "                    config.startTime = DateFormat(run.startTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 0,
            "miss": true
          },
          "148": {
            "source": "                    if (run.finishTime) {",
            "hits": 0,
            "miss": true
          },
          "149": {
            "source": "                        config.finishTime = DateFormat(run.finishTime, 'yyyy-mm-dd HH:MM:ss');",
            "hits": 0,
            "miss": true
          },
          "150": {
            "source": "                        config.elapsedTime = run.elapsedTime;",
            "hits": 0,
            "miss": true
          },
          "151": {
            "source": "                    }",
            "miss": false
          },
          "152": {
            "source": "                    Hoek.merge(config, commonConfig);",
            "hits": 0,
            "miss": true
          },
          "153": {
            "source": "                    return cb(config);",
            "hits": 0,
            "miss": true
          },
          "154": {
            "source": "                });",
            "miss": false
          },
          "155": {
            "source": "            });",
            "miss": false
          },
          "156": {
            "source": "        });",
            "miss": false
          },
          "157": {
            "source": "    });",
            "miss": false
          },
          "158": {
            "source": "};",
            "miss": false
          },
          "159": {
            "source": "",
            "miss": false
          },
          "160": {
            "source": "exports.getTestConfig = function (jobId, runId, artifact, cb) {",
            "hits": 1,
            "miss": false
          },
          "161": {
            "source": "",
            "miss": false
          },
          "162": {
            "source": "    internals.Run.getCommonConfig(function (commonConfig) {",
            "hits": 1,
            "miss": false
          },
          "163": {
            "source": "",
            "miss": false
          },
          "164": {
            "source": "        //console.log(commonConfig);",
            "miss": false
          },
          "165": {
            "source": "        Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "166": {
            "source": "",
            "miss": false
          },
          "167": {
            "source": "            var run = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "168": {
            "source": "            Wreck.get(internals.Run.settings.api.url + '/job/' + jobId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "169": {
            "source": "",
            "miss": false
          },
          "170": {
            "source": "                var job = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "171": {
            "source": "                Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId + '/test/lab.json', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "172": {
            "source": "",
            "miss": false
          },
          "173": {
            "source": "                    var config = {",
            "hits": 1,
            "miss": false
          },
          "174": {
            "source": "                        viewTest: true,",
            "miss": false
          },
          "175": {
            "source": "                        jobId: job.id,",
            "miss": false
          },
          "176": {
            "source": "                        runId: run.id,",
            "miss": false
          },
          "177": {
            "source": "                        jobName: job.name,",
            "miss": false
          },
          "178": {
            "source": "                        elapsedTime: run.elapsedTime,",
            "miss": false
          },
          "179": {
            "source": "                        status: run.status",
            "miss": false
          },
          "180": {
            "source": "                    };",
            "miss": false
          },
          "181": {
            "source": "                    if (pl) {",
            "chunks": [
              {
                "source": "                    if ("
              },
              {
                "source": "pl",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "182": {
            "source": "                        if (!pl.match('statusCode')) {",
            "chunks": [
              {
                "source": "                        if ("
              },
              {
                "source": "!pl.match('statusCode')",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "183": {
            "source": "                            config.testResult = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "184": {
            "source": "                        }",
            "miss": false
          },
          "185": {
            "source": "                    }",
            "miss": false
          },
          "186": {
            "source": "                    Hoek.merge(config, commonConfig);",
            "hits": 1,
            "miss": false
          },
          "187": {
            "source": "                    return cb(config);",
            "hits": 1,
            "miss": false
          },
          "188": {
            "source": "                });",
            "miss": false
          },
          "189": {
            "source": "            });",
            "miss": false
          },
          "190": {
            "source": "        });",
            "miss": false
          },
          "191": {
            "source": "    });",
            "miss": false
          },
          "192": {
            "source": "};",
            "miss": false
          },
          "193": {
            "source": "",
            "miss": false
          },
          "194": {
            "source": "exports.getCoverageConfig = function (jobId, runId, artifact, cb) {",
            "hits": 1,
            "miss": false
          },
          "195": {
            "source": "",
            "miss": false
          },
          "196": {
            "source": "    internals.Run.getCommonConfig(function (commonConfig) {",
            "hits": 1,
            "miss": false
          },
          "197": {
            "source": "",
            "miss": false
          },
          "198": {
            "source": "        //console.log(commonConfig);",
            "miss": false
          },
          "199": {
            "source": "        Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "200": {
            "source": "",
            "miss": false
          },
          "201": {
            "source": "            var run = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "202": {
            "source": "            Wreck.get(internals.Run.settings.api.url + '/job/' + jobId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "203": {
            "source": "",
            "miss": false
          },
          "204": {
            "source": "                var job = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "205": {
            "source": "                Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId + '/test/lab.json', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "206": {
            "source": "",
            "miss": false
          },
          "207": {
            "source": "                    var testResult = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "208": {
            "source": "                    var config = {",
            "hits": 1,
            "miss": false
          },
          "209": {
            "source": "                        jobId: job.id,",
            "miss": false
          },
          "210": {
            "source": "                        runId: run.id,",
            "miss": false
          },
          "211": {
            "source": "                        jobName: job.name,",
            "miss": false
          },
          "212": {
            "source": "                        testResult: testResult",
            "miss": false
          },
          "213": {
            "source": "                    };",
            "miss": false
          },
          "214": {
            "source": "                    config.viewCoverage = true;",
            "hits": 1,
            "miss": false
          },
          "215": {
            "source": "                    Hoek.merge(config, commonConfig);",
            "hits": 1,
            "miss": false
          },
          "216": {
            "source": "                    return cb(config);",
            "hits": 1,
            "miss": false
          },
          "217": {
            "source": "                });",
            "miss": false
          },
          "218": {
            "source": "            });",
            "miss": false
          },
          "219": {
            "source": "        });",
            "miss": false
          },
          "220": {
            "source": "    });",
            "miss": false
          },
          "221": {
            "source": "};",
            "miss": false
          },
          "222": {
            "source": "",
            "miss": false
          },
          "223": {
            "source": "exports.getFileConfig = function (jobId, runId, file, cb) {",
            "hits": 1,
            "miss": false
          },
          "224": {
            "source": "",
            "miss": false
          },
          "225": {
            "source": "    internals.Run.getCommonConfig(function (commonConfig) {",
            "hits": 1,
            "miss": false
          },
          "226": {
            "source": "",
            "miss": false
          },
          "227": {
            "source": "        Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId + '/archive/' + file, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "228": {
            "source": "",
            "miss": false
          },
          "229": {
            "source": "            var contents = pl;",
            "hits": 1,
            "miss": false
          },
          "230": {
            "source": "            var config = {",
            "hits": 1,
            "miss": false
          },
          "231": {
            "source": "                jobId: jobId,",
            "miss": false
          },
          "232": {
            "source": "                runId: runId,",
            "miss": false
          },
          "233": {
            "source": "                file: file,",
            "miss": false
          },
          "234": {
            "source": "                contents: contents",
            "miss": false
          },
          "235": {
            "source": "            };",
            "miss": false
          },
          "236": {
            "source": "            config.viewFile = true;",
            "hits": 1,
            "miss": false
          },
          "237": {
            "source": "            Hoek.merge(config, commonConfig);",
            "hits": 1,
            "miss": false
          },
          "238": {
            "source": "            return cb(config);",
            "hits": 1,
            "miss": false
          },
          "239": {
            "source": "        });",
            "miss": false
          },
          "240": {
            "source": "    });",
            "miss": false
          },
          "241": {
            "source": "};",
            "miss": false
          },
          "242": {
            "source": "",
            "miss": false
          },
          "243": {
            "source": "exports.deleteRun = function (jobId, runId, cb) {",
            "hits": 1,
            "miss": false
          },
          "244": {
            "source": "",
            "miss": false
          },
          "245": {
            "source": "    Wreck.delete(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "246": {
            "source": "",
            "miss": false
          },
          "247": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "248": {
            "source": "    });",
            "miss": false
          },
          "249": {
            "source": "};",
            "miss": false
          },
          "250": {
            "source": "",
            "miss": false
          },
          "251": {
            "source": "exports.cancelRun = function (jobId, runId, cb) {",
            "hits": 1,
            "miss": false
          },
          "252": {
            "source": "",
            "miss": false
          },
          "253": {
            "source": "    Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/run/' + runId + '/cancel', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "254": {
            "source": "",
            "miss": false
          },
          "255": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "256": {
            "source": "    });",
            "miss": false
          },
          "257": {
            "source": "};",
            "miss": false
          },
          "258": {
            "source": "",
            "miss": false
          },
          "259": {
            "source": "exports.cancelPullRequest = function (jobId, number, token, runId, cb) {",
            "hits": 1,
            "miss": false
          },
          "260": {
            "source": "",
            "miss": false
          },
          "261": {
            "source": "    Wreck.get(internals.Run.settings.api.url + '/job/' + jobId + '/pr/' + number + '/run/' + runId + '/cancel', function (err, resp, pl) {",
            "hits": 0,
            "miss": true
          },
          "262": {
            "source": "",
            "miss": false
          },
          "263": {
            "source": "        return cb();",
            "hits": 0,
            "miss": true
          },
          "264": {
            "source": "    });",
            "miss": false
          },
          "265": {
            "source": "};",
            "miss": false
          },
          "266": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/utils/user.js",
        "percent": 98.05825242718447,
        "hits": 101,
        "misses": 2,
        "sloc": 103,
        "source": {
          "1": {
            "source": "var Common = require('./common');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "3": {
            "source": "var Wreck = require('wreck');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports = internals.User = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    this.settings = options;",
            "hits": 270,
            "miss": false
          },
          "10": {
            "source": "    internals.User.settings = options;",
            "hits": 270,
            "miss": false
          },
          "11": {
            "source": "    var common = new Common(options);",
            "hits": 270,
            "miss": false
          },
          "12": {
            "source": "    internals.User.getCommonConfig = common.getCommonConfig;",
            "hits": 270,
            "miss": false
          },
          "13": {
            "source": "    this.createUser = exports.createUser;",
            "hits": 270,
            "miss": false
          },
          "14": {
            "source": "    this.updateUser = exports.updateUser;",
            "hits": 270,
            "miss": false
          },
          "15": {
            "source": "    this.deleteUser = exports.deleteUser;",
            "hits": 270,
            "miss": false
          },
          "16": {
            "source": "    this.getUserConfig = exports.getUserConfig;",
            "hits": 270,
            "miss": false
          },
          "17": {
            "source": "    this.getUsersConfig = exports.getUsersConfig;",
            "hits": 270,
            "miss": false
          },
          "18": {
            "source": "    this.getUserCreateConfig = exports.getUserCreateConfig;",
            "hits": 270,
            "miss": false
          },
          "19": {
            "source": "};",
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "exports.getUsersConfig = function (cb) {",
            "hits": 1,
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "    internals.User.getCommonConfig(function (commonConfig) {",
            "hits": 1,
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "        //console.log(commonConfig);",
            "miss": false
          },
          "26": {
            "source": "        Wreck.get(internals.User.settings.api.url + '/users', function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "            var users = JSON.parse(pl);",
            "hits": 1,
            "miss": false
          },
          "29": {
            "source": "            var config = {",
            "hits": 1,
            "miss": false
          },
          "30": {
            "source": "                viewUsers: true,",
            "miss": false
          },
          "31": {
            "source": "                users: users",
            "miss": false
          },
          "32": {
            "source": "            };",
            "miss": false
          },
          "33": {
            "source": "            Hoek.merge(config, commonConfig);",
            "hits": 1,
            "miss": false
          },
          "34": {
            "source": "            return cb(config);",
            "hits": 1,
            "miss": false
          },
          "35": {
            "source": "        });",
            "miss": false
          },
          "36": {
            "source": "    });",
            "miss": false
          },
          "37": {
            "source": "};",
            "miss": false
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "exports.getUserCreateConfig = function (cb) {",
            "hits": 1,
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "    internals.User.getCommonConfig(function (commonConfig) {",
            "hits": 1,
            "miss": false
          },
          "42": {
            "source": "",
            "miss": false
          },
          "43": {
            "source": "        //console.log(commonConfig);",
            "miss": false
          },
          "44": {
            "source": "        var config = {};",
            "hits": 1,
            "miss": false
          },
          "45": {
            "source": "        config.postUrl = internals.User.settings.viewPath + '/user';",
            "hits": 1,
            "miss": false
          },
          "46": {
            "source": "        config.viewUser = true;",
            "hits": 1,
            "miss": false
          },
          "47": {
            "source": "        // default to local",
            "miss": false
          },
          "48": {
            "source": "        config.type = 'local';",
            "hits": 1,
            "miss": false
          },
          "49": {
            "source": "        Hoek.merge(config, commonConfig);",
            "hits": 1,
            "miss": false
          },
          "50": {
            "source": "        return cb(config);",
            "hits": 1,
            "miss": false
          },
          "51": {
            "source": "    });",
            "miss": false
          },
          "52": {
            "source": "};",
            "miss": false
          },
          "53": {
            "source": "",
            "miss": false
          },
          "54": {
            "source": "exports.getUserConfig = function (userId, cb) {",
            "hits": 1,
            "miss": false
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "    internals.User.getCommonConfig(function (commonConfig) {",
            "hits": 2,
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "        //console.log(commonConfig);",
            "miss": false
          },
          "59": {
            "source": "        Wreck.get(internals.User.settings.api.url + '/user/' + userId, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "            var config = {};",
            "hits": 2,
            "miss": false
          },
          "62": {
            "source": "            var user = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "63": {
            "source": "            config = {",
            "hits": 2,
            "miss": false
          },
          "64": {
            "source": "                postUrl: internals.User.settings.viewPath + '/user/' + user.id,",
            "miss": false
          },
          "65": {
            "source": "                id: user.id,",
            "miss": false
          },
          "66": {
            "source": "                type: user.type,",
            "miss": false
          },
          "67": {
            "source": "                name: user.name,",
            "miss": false
          },
          "68": {
            "source": "                displayName: user.displayName,",
            "miss": false
          },
          "69": {
            "source": "                email: user.email,",
            "miss": false
          },
          "70": {
            "source": "                password: user.password",
            "miss": false
          },
          "71": {
            "source": "            };",
            "miss": false
          },
          "72": {
            "source": "            config.viewUser = true;",
            "hits": 2,
            "miss": false
          },
          "73": {
            "source": "            Hoek.merge(config, commonConfig);",
            "hits": 2,
            "miss": false
          },
          "74": {
            "source": "            return cb(config);",
            "hits": 2,
            "miss": false
          },
          "75": {
            "source": "        });",
            "miss": false
          },
          "76": {
            "source": "    });",
            "miss": false
          },
          "77": {
            "source": "};",
            "miss": false
          },
          "78": {
            "source": "",
            "miss": false
          },
          "79": {
            "source": "exports.createUser = function (payload, cb) {",
            "hits": 1,
            "miss": false
          },
          "80": {
            "source": "",
            "miss": false
          },
          "81": {
            "source": "    var config = {",
            "hits": 2,
            "miss": false
          },
          "82": {
            "source": "        name: payload.name,",
            "miss": false
          },
          "83": {
            "source": "        type: payload.type,",
            "miss": false
          },
          "84": {
            "source": "        displayName: payload.displayName,",
            "miss": false
          },
          "85": {
            "source": "        email: payload.email",
            "miss": false
          },
          "86": {
            "source": "    };",
            "miss": false
          },
          "87": {
            "source": "    if (payload.type === 'local') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "payload.type === 'local'",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 2,
            "miss": true
          },
          "88": {
            "source": "        config.password = payload.password;",
            "hits": 2,
            "miss": false
          },
          "89": {
            "source": "    }",
            "miss": false
          },
          "90": {
            "source": "    Wreck.post(internals.User.settings.api.url + '/user', { headers: { 'Content-Type': 'application/json' }, payload: JSON.stringify(config) }, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "91": {
            "source": "",
            "miss": false
          },
          "92": {
            "source": "        var createConfig = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "93": {
            "source": "        return cb(createConfig);",
            "hits": 2,
            "miss": false
          },
          "94": {
            "source": "    });",
            "miss": false
          },
          "95": {
            "source": "};",
            "miss": false
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "exports.deleteUser = function (userId, cb) {",
            "hits": 1,
            "miss": false
          },
          "98": {
            "source": "",
            "miss": false
          },
          "99": {
            "source": "    Wreck.delete(internals.User.settings.api.url + '/user/' + userId, function (err, resp, pl) {",
            "hits": 1,
            "miss": false
          },
          "100": {
            "source": "",
            "miss": false
          },
          "101": {
            "source": "        return cb();",
            "hits": 1,
            "miss": false
          },
          "102": {
            "source": "    });",
            "miss": false
          },
          "103": {
            "source": "};",
            "miss": false
          },
          "104": {
            "source": "",
            "miss": false
          },
          "105": {
            "source": "exports.updateUser = function (userId, payload, cb) {",
            "hits": 1,
            "miss": false
          },
          "106": {
            "source": "",
            "miss": false
          },
          "107": {
            "source": "    Wreck.get(internals.User.settings.api.url + '/user/' + userId, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "108": {
            "source": "",
            "miss": false
          },
          "109": {
            "source": "        var originalUser = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "110": {
            "source": "        var config = {",
            "hits": 2,
            "miss": false
          },
          "111": {
            "source": "            type: payload.type,",
            "miss": false
          },
          "112": {
            "source": "            name: payload.name,",
            "miss": false
          },
          "113": {
            "source": "            displayName: payload.displayName,",
            "miss": false
          },
          "114": {
            "source": "            email: payload.email",
            "miss": false
          },
          "115": {
            "source": "        };",
            "miss": false
          },
          "116": {
            "source": "        // we dont want to pass password again if password didnt change or it will encrypt the encrypt",
            "miss": false
          },
          "117": {
            "source": "        // we only care about password if its local",
            "miss": false
          },
          "118": {
            "source": "        if (originalUser.password !== payload.password && payload.type === 'local') {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "originalUser.password !== payload.password",
                "miss": "true"
              },
              {
                "source": " && payload.type === 'local') {"
              }
            ],
            "hits": 2,
            "miss": true
          },
          "119": {
            "source": "            config.password = payload.password;",
            "hits": 2,
            "miss": false
          },
          "120": {
            "source": "        }",
            "miss": false
          },
          "121": {
            "source": "        Wreck.post(internals.User.settings.api.url + '/user/' + userId, { headers: { 'Content-Type': 'application/json' }, payload: JSON.stringify(config) }, function (err, resp, pl) {",
            "hits": 2,
            "miss": false
          },
          "122": {
            "source": "",
            "miss": false
          },
          "123": {
            "source": "            var updateConfig = JSON.parse(pl);",
            "hits": 2,
            "miss": false
          },
          "124": {
            "source": "            return cb(updateConfig);",
            "hits": 2,
            "miss": false
          },
          "125": {
            "source": "        });",
            "miss": false
          },
          "126": {
            "source": "    });",
            "miss": false
          },
          "127": {
            "source": "};",
            "miss": false
          },
          "128": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "views/helpers/coverageStringCompare.js",
        "percent": 57.14285714285714,
        "hits": 4,
        "misses": 3,
        "sloc": 7,
        "source": {
          "1": {
            "source": "var Handlebars = require('handlebars');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "module.exports = function (context) {",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "    if (context.miss && context.miss !== 'false') {",
            "hits": 0,
            "miss": true
          },
          "6": {
            "source": "        return new Handlebars.SafeString('<tr class=\"danger\"><td>' + context.miss + '</td><td colspan=2>' + context.source + '</td></tr>\\n');",
            "hits": 0,
            "miss": true
          },
          "7": {
            "source": "    }",
            "miss": false
          },
          "8": {
            "source": "    return '';",
            "hits": 0,
            "miss": true
          },
          "9": {
            "source": "};",
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "views/helpers/scheduleTypeRadio.js",
        "percent": 100,
        "hits": 13,
        "misses": 0,
        "sloc": 13,
        "source": {
          "1": {
            "source": "var Handlebars = require('handlebars');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "module.exports = function (context) {",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "    var output = '';",
            "hits": 7,
            "miss": false
          },
          "6": {
            "source": "    var types = [ 'none', 'cron' ];",
            "hits": 7,
            "miss": false
          },
          "7": {
            "source": "    for (var i = 0; i < types.length; i++) {",
            "hits": 7,
            "miss": false
          },
          "8": {
            "source": "        output += '<div class=\"btn-group\"><span class=\"input-group-addon\"><input type=\"radio\" name=\"scheduleType\" value=\"' + types[i] + '\"';",
            "hits": 14,
            "miss": false
          },
          "9": {
            "source": "        if (types[i] === context.scheduleType ) {",
            "hits": 14,
            "miss": false
          },
          "10": {
            "source": "            output += ' checked';",
            "hits": 6,
            "miss": false
          },
          "11": {
            "source": "        }",
            "miss": false
          },
          "12": {
            "source": "        output += '> </span> <button type=\"button\" class=\"btn btn-default\">' + types[i] + '</button></div>';",
            "hits": 14,
            "miss": false
          },
          "13": {
            "source": "    }",
            "miss": false
          },
          "14": {
            "source": "    return new Handlebars.SafeString(output);",
            "hits": 7,
            "miss": false
          },
          "15": {
            "source": "};",
            "miss": false
          },
          "16": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "views/helpers/showMerge.js",
        "percent": 55.55555555555556,
        "hits": 5,
        "misses": 4,
        "sloc": 9,
        "source": {
          "1": {
            "source": "var Handlebars = require('handlebars');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "module.exports = function (context) {",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "    //console.log(context);",
            "miss": false
          },
          "6": {
            "source": "    var output = '';",
            "hits": 0,
            "miss": true
          },
          "7": {
            "source": "    if (context.type === 'github') {",
            "hits": 0,
            "miss": true
          },
          "8": {
            "source": "        output = '<a class=\"btn btn-info\" href=\"/view/job/pr/' + context.number + '/merge\">Merge</a>';",
            "hits": 0,
            "miss": true
          },
          "9": {
            "source": "    }",
            "miss": false
          },
          "10": {
            "source": "    return new Handlebars.SafeString(output);",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "};",
            "miss": false
          },
          "12": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "views/helpers/userTypeRadio.js",
        "percent": 100,
        "hits": 16,
        "misses": 0,
        "sloc": 16,
        "source": {
          "1": {
            "source": "var Handlebars = require('handlebars');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "module.exports = function (context) {",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "    var output = '';",
            "hits": 3,
            "miss": false
          },
          "6": {
            "source": "    var types = [ 'local', 'github' ];",
            "hits": 3,
            "miss": false
          },
          "7": {
            "source": "    if (context.name === 'admin') {",
            "hits": 3,
            "miss": false
          },
          "8": {
            "source": "        types = [ 'local' ];",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "    }",
            "miss": false
          },
          "10": {
            "source": "    for (var i = 0; i < types.length; i++) {",
            "hits": 3,
            "miss": false
          },
          "11": {
            "source": "        output += '<div class=\"btn-group\"><span class=\"input-group-addon\"><input type=\"radio\" name=\"type\" value=\"' + types[i] + '\"';",
            "hits": 5,
            "miss": false
          },
          "12": {
            "source": "        if (types[i] === context.type ) {",
            "hits": 5,
            "miss": false
          },
          "13": {
            "source": "            output += ' checked';",
            "hits": 3,
            "miss": false
          },
          "14": {
            "source": "        }",
            "miss": false
          },
          "15": {
            "source": "        output += '> </span> <button type=\"button\" class=\"btn btn-default\">' + types[i] + '</button></div>';",
            "hits": 5,
            "miss": false
          },
          "16": {
            "source": "    }",
            "miss": false
          },
          "17": {
            "source": "    return new Handlebars.SafeString(output);",
            "hits": 3,
            "miss": false
          },
          "18": {
            "source": "};",
            "miss": false
          },
          "19": {
            "source": "",
            "miss": false
          }
        }
      }
    ]
  }
}